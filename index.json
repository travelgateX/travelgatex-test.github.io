[
{
	"uri": "/travelgatex/reference/objects/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " An API is a set of functions and procedures that allow the creation of applications which access the features or data of an operating system, application, or other service.\nGraphQL Schema definition type API {\r\rcode: ID! \r\r\rerror: [Error!] \r\r\rapiData: APIData \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rerror([Error!]):\r\r\rapiData(APIData):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequire by APIEdge: \r\r\r\n"
},
{
	"uri": "/hotelx/reference/api-reference/",
	"title": "API Reference",
	"tags": [],
	"description": "",
	"content": " This API reference is organized by graphql operations related to product.\nQuery Operations Mutation Operations Documentation Schema documentation\nSamples  Search, Quote, Book, Cancel and Retrieve bookings  "
},
{
	"uri": "/travelgatex/reference/objects/apiconnection/",
	"title": "APIConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type APIConnection {\r\redges: [APIEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([APIEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequire by AdminQuery: \r\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rGroupData: \r\r\rResourceData: \r\r\rProductData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/apidata/",
	"title": "APIData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type APIData {\r\rid: ID! \r\r\rcode: ID! \r\r\rgroups(\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\rcodes: [ID!],\r\r\r\r\r): GroupConnection \r\r\rresources(\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\rcodes: [ID!],\r\r\r\r\r): ResourceConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rgroups(GroupConnection):\r\r\rresources(ResourceConnection):\r\r\r\nRequire by API: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/apiedge/",
	"title": "APIEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type APIEdge {\r\rcursor: String! \r\r\rnode: API \r\r}\r\r\rFields cursor(String!):\r\r\rnode(API):\r\r\r\nRequire by APIConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": " An Access is a set of credentials and configuration in order to access a Provider.\nGraphQL Schema definition type Access {\r\rcode: ID! \r\r\raccessData: AccessData! \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\raccessData(AccessData!):\r\r\rerror([Error!]):\rErrors that will lead the service to abort\r\rcreatedAt(DateTime!):\rCreate date\r\rupdatedAt(DateTime!):\rUpdate date\r\r\n"
},
{
	"uri": "/hotelx/concepts/accesses-supplier-context/",
	"title": "Access, Supplier and Context",
	"tags": [],
	"description": "Learn about Core Entities used in TravelgateX",
	"content": " Supplier Product segmentation over a provider API implementation. Supplier codes are uniques ove all TravelgateX organizations.\nAccess Configuration to use when interacting with a supplier, which includes:\n URLs Credentials Markets Rate Types Specific supplier settings  Context Context is the way codes are formed. Every platform can manage its own contexts or reuse existing ones.\nThat is to say, different sellers and buyers can manage same codes context. For example SmyRooms supplier uses SMY contexts.\nContext apply to:\n Hotel Codes Board Codes Room Codes  Thanks to our built in solution you will be able to choose the context that you want to use when requesting an HotelX operation. This context will be used in order to map with other suppliers contexts.\nWe recommend to use the biggest context possible or use your own context, so all supplier mappings can be resolved.\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessconfigurationinput/",
	"title": "AccessConfigurationInput",
	"tags": [],
	"description": "",
	"content": " The information required to access the supplier\u0026rsquo;s system.\nGraphQL Schema definition type AccessConfigurationInput {\r\risActive: Boolean! \r\r\rcode: String! \r\r\rsupplier: String! \r\r\rconfiguration: ConfigurationInput \r\r}\r\r\rFields isActive(Boolean!):\rIndicates if the access is active.\r\rcode(String!):\rArbitrary not unique identifier\r\rsupplier(String!):\rSupplier to which this access belongs\r\rconfiguration(ConfigurationInput):\rInformation required to access the supplier\u0026#39;s system.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessconnectuserinput/",
	"title": "AccessConnectUserInput",
	"tags": [],
	"description": "",
	"content": " Connect user input for data access management API\nGraphQL Schema definition type AccessConnectUserInput {\r\rcode: String! \r\r\risActive: Boolean! \r\r\rgroups: [ConnectUserGroupInput!] \r\r}\r\r\rFields code(String!):\rconnect user code\r\risActive(Boolean!):\rIndicates if the connect user is active.\r\rgroups([ConnectUserGroupInput!]):\rgroups related to this connect user\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/accessconnection/",
	"title": "AccessConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AccessConnection {\r\redges: [AccessEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([AccessEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/accessdata/",
	"title": "AccessData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AccessData {\r\rsuppliers: Supplier! \r\r\risActive: Boolean! \r\r\rid: ID! \r\r\rcode: String! \r\r\rsupplier: String! \r\r\ruser: String \r\r\rpassword: String \r\r\rurls: Urls! \r\r\rparameters: [Parameter!] \r\r\rmarkets: [String!] \r\r}\r\r\rFields suppliers(Supplier!):\rcode: ID! URL: Url! user: String!\r\risActive(Boolean!):\rIndicates if the access is active.\r\rid(ID!):\rUnique AccessConfiguration identifier\r\rcode(String!):\rAccess code.\r\rsupplier(String!):\rsupplier for this access.\r\ruser(String):\rUser code to connect to supplier.\r\rpassword(String):\rPassword for the connection.\r\rurls(Urls!):\rSpecific Urls\r\rparameters([Parameter!]):\rList of parameters for additional information.\r\rmarkets([String!]):\rMarkets allowed for the access.\r\r\nRequire by Access: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/accessedge/",
	"title": "AccessEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AccessEdge {\r\rcursor: String! \r\r\rnode: Supplier \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Supplier):\r\r\r\nRequire by AccessConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessfilterinput/",
	"title": "AccessFilterInput",
	"tags": [],
	"description": "",
	"content": " Include OR exclude accesses in this specific search query. If not specified, default accesses will be used. Only one list (includes or excludes) MUST be used.\nGraphQL Schema definition type AccessFilterInput {\r\rincludes: [ID!] \r\r\rexcludes: [ID!] \r\r}\r\r\rFields includes([ID!]):\rThese Access IDs will overwrite the default configuration. Only the IDs on this list will be used in the search query.\r\rexcludes([ID!]):\rThese Access IDs will overwrite the default configuration. The IDs on this list will be excluded from the search query.\r\r\nRequire by FilterInput: \rFilter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026#39;t specified anything. If input both, you will receive a validation error that indicates this error.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessinput/",
	"title": "AccessInput",
	"tags": [],
	"description": "",
	"content": " AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.\nGraphQL Schema definition type AccessInput {\r\raccessId: ID! \r\r\rconfiguration: ConfigurationInput \r\r\rsettings: SettingsBaseInput \r\r}\r\r\rFields accessId(ID!):\rThe accessID used to identify the existing access in our Back Office in order to overwrite it. Acts as an identifier in this search. It can either exist or not.\r\rconfiguration(ConfigurationInput):\rInformation required to access the supplier\u0026#39;s system.\r\rsettings(SettingsBaseInput):\rYou can configure an special settings for any access. This level overwrites the search and supplier settings levels.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accesssupplierinput/",
	"title": "AccessSupplierInput",
	"tags": [],
	"description": "",
	"content": " Supplier input for data access management API\nGraphQL Schema definition type AccessSupplierInput {\r\rcode: String! \r\r\rdll: String! \r\r\risActive: Boolean! \r\r\rgroups: [SupplierGroupInput!] \r\r}\r\r\rFields code(String!):\rsupplier code\r\rdll(String!):\rsupplier instance\r\risActive(Boolean!):\rIndicates if the supplier is active.\r\rgroups([SupplierGroupInput!]):\rgroups related to this supplier\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/addons/",
	"title": "AddOns",
	"tags": [],
	"description": "",
	"content": " Extra information about the option.\nGraphQL Schema definition type AddOns {\r\rdistribute: JSON \r\r}\r\r\rFields distribute(JSON):\rExtra information from the distribution layer\r\r\nRequire by HotelOptionSearch: \rAn option includes hotel information, meal plan, total price, conditions and room description.\r\rHotelOptionQuote: \rContains information about quote.\r\rHotelBookingDetail: \rContains information about booking.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/adminmutation/",
	"title": "AdminMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AdminMutation {\r\rcreateMember(\rmember: CreateMemberInput!,\r): Member! \r\r\rcreateGroup(\rgroup: CreateGroupInput!,\r): Group! \r\r\rupdateMember(\rmember: UpdateMemberInput!,\r): Member! \r\r\rupdateGroup(\rgroup: UpdateGroupInput!,\r): Group! \r\r\rdeleteMember(\rmember: [DeleteMemberInput!]!,\r): Member! \r\r\rdeleteGroup(\rgroup: DeleteGroupInput!,\r): Group! \r\r}\r\r\rFields createMember(Member!):\rCreate member. Requires specific group and role.\r\rcreateGroup(Group!):\rCreate group. Group \u0026#34;owner\u0026#34; is optional.\r\rupdateMember(Member!):\rUpdate member adding or removing roles.\r\rupdateGroup(Group!):\rUpdate group adding or removing apis.\r\rdeleteMember(Member!):\rDelete member from specific group.\r\rdeleteGroup(Group!):\rDelete group and members from this group.\r\r\nRequire by Mutation: \rMutations are operations that change or update data in the server.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/adminquery/",
	"title": "AdminQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AdminQuery {\r\rorganizations(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): OrganizationConnection! \r\r\rproducts(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): ProductConnection! \r\r\rmembers(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): MemberConnection! \r\r\rgroups(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): GroupConnection! \r\r\rapis(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): APIConnection! \r\r\rresources(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): ResourceConnection! \r\r\rroles(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): RoleConnection! \r\r}\r\r\rFields organizations(OrganizationConnection!):\rOrganizations list. Specify organization codes to filter organizations.\r\rproducts(ProductConnection!):\rProducts list. Specify product codes to filter products.\r\rmembers(MemberConnection!):\rMembers list. Specify member codes to filter members.\r\rgroups(GroupConnection!):\rGroups list. Specify group codes to filter groups.\r\rapis(APIConnection!):\rApis list. Specify api codes to filter apis.\r\rresources(ResourceConnection!):\rResources list. Specify resource codes to filter resources.\r\rroles(RoleConnection!):\rRoles list. Specify role codes to filter roles.\r\r\nRequire by Query: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/interfaces/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface AdviseMessage {\r\rcode: String! \r\r\rtype: String! \r\r\rdescription: String! \r\r}\r\r\rFields code(String!):\rTODO: Error code: The following codes can be returned: XXX: XXXXXXXXX XXXXXX\r\rtype(String!):\rTODO: Error type: The following types are valid: XXX: asd asdÃ±oajskd lÃ±a ld\r\rdescription(String!):\rError description\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/amenity/",
	"title": "Amenity",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Amenity {\r\rcode: ID! \r\r\rAmenityData: AmenityData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rAmenityData(AmenityData):\r\r\rerror([Error!]):\rErrors that will lead the service to abort\r\rcreatedAt(DateTime!):\rCreate date\r\rupdatedAt(DateTime!):\rUpdate date\r\r\nRequire by AmenityEdge: \rHotelList Edge definition\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/amenityconnection/",
	"title": "AmenityConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AmenityConnection {\r\redges: [AmenityEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([AmenityEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequire by HotelData: \rHotel data\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/amenitydata/",
	"title": "AmenityData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AmenityData {\r\rcode: ID! \r\r\rinformation: Information! \r\r\rtype: ApplicationArea! \r\r}\r\r\rFields code(ID!):\r\r\rinformation(Information!):\r\r\rtype(ApplicationArea!):\r\r\r\nRequire by Amenity: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/amenityedge/",
	"title": "AmenityEdge",
	"tags": [],
	"description": "",
	"content": " HotelList Edge definition\nGraphQL Schema definition type AmenityEdge {\r\rcursor: String! \r\r\rnode: Amenity \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Amenity):\r\r\r\nRequire by AmenityConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/applicationarea/",
	"title": "ApplicationArea",
	"tags": [],
	"description": "",
	"content": " Indicates a place\nGraphQL Schema definition \renum\rApplicationArea{\r\r\rGENERAL,\r\r\r\rHOTEL,\r\r\r\rROOM,\r\r\r\rSERVICE,\r\r\r} \r Require by MediaData: \r\r\rAmenityData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/auditdata/",
	"title": "AuditData",
	"tags": [],
	"description": "",
	"content": " Data sent \u0026amp; received in the supplierâ€™s native format.\nGraphQL Schema definition type AuditData {\r\rtransactions: [Transactions!]! \r\r\rtimeStamp: DateTime! \r\r\rprocessTime: Float! \r\r}\r\r\rFields transactions([Transactions!]!):\rList of transactions data.\r\rtimeStamp(DateTime!):\rTimeStamp\r\rprocessTime(Float!):\rProcess time in milliseconds (ms)\r\r\nRequire by HotelSearch: \rResults of Avail Hotel. Contains all the available options for a given date and itinerary.\r\rResponse: \r\r\rHotelQuote: \r\r\rHotelBooking: \r\r\rHotelBookPayload: \r\r\rHotelCancelPayload: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/bed/",
	"title": "Bed",
	"tags": [],
	"description": "",
	"content": " Contains information about a bed.\nGraphQL Schema definition type Bed {\r\rtype: String \r\r\rdescription: String \r\r\rcount: Int \r\r\rshared: Boolean \r\r}\r\r\rFields type(String):\rSpecifies the bed type.\r\rdescription(String):\rDescription about the bed.\r\rcount(Int):\rIndicates number of beds in the room.\r\rshared(Boolean):\rSpecifies if the bed is shared or not.\r\r\n"
},
{
	"uri": "/hotelx/howtos/howto-book/",
	"title": "Book",
	"tags": [],
	"description": "",
	"content": "Flow to book\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/bookpaxinput/",
	"title": "BookPaxInput",
	"tags": [],
	"description": "",
	"content": " Input BookPax contains basic information abaout pax suach as name, surname and age.\nGraphQL Schema definition type BookPaxInput {\r\rname: String! \r\r\rsurname: String! \r\r\rage: Int! \r\r}\r\r\rFields name(String!):\rThe guest\u0026#39;s first name\r\rsurname(String!):\rThe guest\u0026#39;s last name\r\rage(Int!):\rThe guest\u0026#39;s age\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/bookreferenceinput/",
	"title": "BookReferenceInput",
	"tags": [],
	"description": "",
	"content": " Reference object that contains the client reference and/or supplier reference.\nGraphQL Schema definition type BookReferenceInput {\r\rclient: String \r\r\rsupplier: String \r\r}\r\r\rFields client(String):\rThe client\u0026#39;s reference\r\rsupplier(String):\rThe Supplier\u0026#39;s reference\r\r\nRequire by HotelCancelInput: \rCancellation Criteria.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/bookroominput/",
	"title": "BookRoomInput",
	"tags": [],
	"description": "",
	"content": " Input BookRoom contains list of pax and the room\u0026rsquo;s reference.\nGraphQL Schema definition type BookRoomInput {\r\roccupancyRefId: Int! \r\r\rpaxes: [BookPaxInput!]! \r\r}\r\r\rFields occupancyRefId(Int!):\rThe room\u0026#39;s reference in the booking\r\rpaxes([BookPaxInput!]!):\rThe list or lists of paxes of the room\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/bookstatustype/",
	"title": "BookStatusType",
	"tags": [],
	"description": "",
	"content": " Book status\nGraphQL Schema definition \renum\rBookStatusType{\r\r\rOK,\r\r\r\rKO,\r\r\r\rON_REQUEST,\r\r\r\rCANCELLED,\r\r\r\rUNKNOWN,\r\r\r} \r Require by HotelBookingDetail: \rContains information about booking.\r\rHotelCancelDetail: \rContains information about cancel\r\r\n"
},
{
	"uri": "/travelgatex/reference/interfaces/bookableoptionsearch/",
	"title": "BookableOptionSearch",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface BookableOptionSearch {\r\rsupplierCode: String! \r\r\raccessCode: String! \r\r\rid: String! \r\r}\r\r\rFields supplierCode(String!):\rSupplier that offers this option.\r\raccessCode(String!):\rAccess code of this option.\r\rid(String!):\rIndicates the id to be used on Quote as key\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/booking/",
	"title": "Booking",
	"tags": [],
	"description": "",
	"content": " Returns detailed information about books.\nGraphQL Schema definition type Booking {\r\rhotel(\rcriteria: HotelCriteriaBookingInput!,\rsettings: HotelSettingsInput,\r): HotelBooking \r\r}\r\r\rFields hotel(HotelBooking):\rReturns detailed information about books, you can indicated a list of locators or a range date.\r\r\nRequire by Query: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/bookingcriteriatype/",
	"title": "BookingCriteriaType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of criteria in the request of the booking list\nGraphQL Schema definition \renum\rBookingCriteriaType{\r\r\rDATES,\r\r\r\rREFERENCES,\r\r\r} \r Require by HotelCriteriaBookingInput: \rCriteria of book contains basic information to find a book or books.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/bookinghotel/",
	"title": "BookingHotel",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type BookingHotel {\r\rcreationDate: Date \r\r\rcheckIn: Date \r\r\rcheckOut: Date \r\r\rhotelCode: String \r\r\rhotelName: String \r\r\rboardCode: String \r\r\roccupancies: [Occupancy!] \r\r\rrooms: [BookingRoom!] \r\r}\r\r\rFields creationDate(Date):\rCreation date of the booking. Format: yyyy-MM-dd\r\rcheckIn(Date):\rCheck-in date for the booking. Format: yyyy-MM-dd\r\rcheckOut(Date):\rCheck-out date for the booking. Format: yyyy-MM-dd\r\rhotelCode(String):\rCode of the hotel in the context selected.\r\rhotelName(String):\rName of the hotel.\r\rboardCode(String):\rCode of the board in the context selected.\r\roccupancies([Occupancy!]):\rList of occupancies of the request.\r\rrooms([BookingRoom!]):\rList of rooms.\r\r\nRequire by HotelBookingDetail: \rContains information about booking.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/bookingroom/",
	"title": "BookingRoom",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type BookingRoom {\r\roccupancyRefId: Int \r\r\rcode: String \r\r\rdescription: String \r\r\rprice: Price \r\r}\r\r\rFields occupancyRefId(Int):\rID reference to the occupancy.\r\rcode(String):\rIndicates the room code.\r\rdescription(String):\rDescription about the room.\r\rprice(Price):\rTotal price for all days.\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL Schema definition scalar Boolean\r\r\rRequire by HotelData: \rHotel data\r\rPageInfo: \r\r\rDestination: \rDestination type\r\rHotelSettingsInput: \rSettings that you can edit for this avail. Values are loaded by default in our Back Office.\r\rSettingsBaseInput: \rContains the time out and business rules of a supplier or an access.\r\rRoom: \rContains the room information of the option returned.\r\rPrice: \rPrice indicates the value of the room/option. Supplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.\r\rPriceable: \r\r\rMarkup: \rInforms markup applied over supplier price.\r\rBed: \rContains information about a bed.\r\rSupplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\rSurcharge: \rSurcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.\r\rCancelPolicy: \rContains information about a cancel policy.\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rMember: \r\r\rGroupData: \r\r\rRoleData: \r\r\rMutation: \rMutations are operations that change or update data in the server.\r\rDeltaPriceInput: \rInput delta price, indicates price variation permitted by the client\r\rAccessData: \r\r\rSupplierData: \r\r\rSupplierGroup: \rgroup related to a supplier\r\rConnectUser: \rdata related to a connect user and its groups\r\rConnectUserGroup: \rgroup related to a connect user\r\rAccessConfigurationInput: \rThe information required to access the supplier\u0026#39;s system.\r\rAccessConnectUserInput: \rConnect user input for data access management API\r\rConnectUserGroupInput: \rgroup related to a connect user\r\rAccessSupplierInput: \rSupplier input for data access management API\r\rSupplierGroupInput: \rgroup related to a supplier\r\rIdAccessConfigurationInput: \r\r\r "
},
{
	"uri": "/travelgatex/tutorials/ota-site/",
	"title": "Build An OTA",
	"tags": [],
	"description": "Build Your Own Full Fledged OTA",
	"content": ""
},
{
	"uri": "/travelgatex/reference/objects/businessrules/",
	"title": "BusinessRules",
	"tags": [],
	"description": "",
	"content": " List of business rules to filter the options that you are interested.\nGraphQL Schema definition type BusinessRules {\r\roptionsQuota: Int! \r\r\rbusinessRulesType: BusinessRulesType! \r\r}\r\r\rFields optionsQuota(Int!):\rOptions quota per avail. Numbers of options wanted by avail.\r\rbusinessRulesType(BusinessRulesType!):\rDifferent business rules to filter the options that you are interested.\r\r\nRequire by DefaultSettings: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/businessrulesinput/",
	"title": "BusinessRulesInput",
	"tags": [],
	"description": "",
	"content": " List of business rules to use as filter on the options.\nGraphQL Schema definition type BusinessRulesInput {\r\roptionsQuota: Int \r\r\rbusinessRulesType: BusinessRulesType \r\r}\r\r\rFields optionsQuota(Int):\rOptions quota per search. Maximum numbers of options to be returned by the search query.\r\rbusinessRulesType(BusinessRulesType):\rDifferent business rules to filter the returned options.\r\r\nRequire by HotelSettingsInput: \rSettings that you can edit for this avail. Values are loaded by default in our Back Office.\r\rSettingsBaseInput: \rContains the time out and business rules of a supplier or an access.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/businessrulestype/",
	"title": "BusinessRulesType",
	"tags": [],
	"description": "",
	"content": " Business rules type\nGraphQL Schema definition \renum\rBusinessRulesType{\r\r\rCHEAPER_AMOUNT,\r\r\r\rROOM_TYPE,\r\r\r} \r Require by BusinessRulesInput: \rList of business rules to use as filter on the options.\r\rBusinessRules: \rList of business rules to filter the options that you are interested.\r\rDefaultSettingsBusinessRulesInput: \rInput delta price, indicates the price variation permitted by the client before failing the booking.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/cancelpenalty/",
	"title": "CancelPenalty",
	"tags": [],
	"description": "",
	"content": " Contains information about a cancel penalty.\nGraphQL Schema definition type CancelPenalty {\r\rhoursBefore: Int! \r\r\rpenaltyType: CancelPenaltyType! \r\r\rcurrency: Currency! \r\r\rvalue: Float! \r\r}\r\r\rFields hoursBefore(Int!):\rCancellation fees applicable x number of hours before the check in date.\r\rpenaltyType(CancelPenaltyType!):\rType of penalty. This can be Nights, Percent or Import.\r\rcurrency(Currency!):\rCurrency used in the cancel policy.\r\rvalue(Float!):\rValue of the cancel policy.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/cancelpenaltytype/",
	"title": "CancelPenaltyType",
	"tags": [],
	"description": "",
	"content": " Options type\nGraphQL Schema definition \renum\rCancelPenaltyType{\r\r\rNIGHTS,\r\r\r\rPERCENT,\r\r\r\rIMPORT,\r\r\r} \r Require by CancelPenalty: \rContains information about a cancel penalty.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/cancelpolicy/",
	"title": "CancelPolicy",
	"tags": [],
	"description": "",
	"content": " Contains information about a cancel policy.\nGraphQL Schema definition type CancelPolicy {\r\rrefundable: Boolean! \r\r\rcancelPenalties: [CancelPenalty!] \r\r}\r\r\rFields refundable(Boolean!):\rIndicates if the option is refundable or not. This information is mandatory.\r\rcancelPenalties([CancelPenalty!]):\rList of cancel penalties.\r\r\nRequire by HotelOptionSearch: \rAn option includes hotel information, meal plan, total price, conditions and room description.\r\rHotelOptionQuote: \rContains information about quote.\r\rHotelBookingDetail: \rContains information about booking.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/chargetype/",
	"title": "ChargeType",
	"tags": [],
	"description": "",
	"content": " Charge Type\nGraphQL Schema definition \renum\rChargeType{\r\r\rINCLUDE,\r\r\r\rEXCLUDE,\r\r\r} \r Require by Supplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\rSurcharge: \rSurcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/configurationinput/",
	"title": "ConfigurationInput",
	"tags": [],
	"description": "",
	"content": " The information and credentials required to access the supplierâ€™s system.\nGraphQL Schema definition type ConfigurationInput {\r\rusername: String \r\r\rpassword: String \r\r\rurls: UrlsInput! \r\r\rparameters: [ParameterInput!] \r\r\rmarkets: [String!] \r\r\rrateRules: [RateRulesType!] \r\r}\r\r\rFields username(String):\rUser name for the connection.\r\rpassword(String):\rPassword for the connection.\r\rurls(UrlsInput!):\rUrl or endpoint for the connection.\r\rparameters([ParameterInput!]):\rList of parameters with additional required information.\r\rmarkets([String!]):\rSource markets allowed for the access.\r\rrateRules([RateRulesType!]):\rRateRules allowed for the access.\r\r\nRequire by AccessInput: \rAccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.\r\rAccessConfigurationInput: \rThe information required to access the supplier\u0026#39;s system.\r\rIdAccessConfigurationInput: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/connectuser/",
	"title": "ConnectUser",
	"tags": [],
	"description": "",
	"content": " data related to a connect user and its groups\nGraphQL Schema definition type ConnectUser {\r\rcode: String! \r\r\risActive: Boolean! \r\r\rconnectUserGroups: [ConnectUserGroup!] \r\r}\r\r\rFields code(String!):\runique connect user of a supplier\r\risActive(Boolean!):\rindicates whether a connect user is active\r\rconnectUserGroups([ConnectUserGroup!]):\rconnect user\u0026#39;s related data of its groups\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/connectusergroup/",
	"title": "ConnectUserGroup",
	"tags": [],
	"description": "",
	"content": " group related to a connect user\nGraphQL Schema definition type ConnectUserGroup {\r\rgroupCode: String! \r\r\risActive: Boolean! \r\r}\r\r\rFields groupCode(String!):\rgroup code of the group related to this connect user\r\risActive(Boolean!):\rIndicates if the connect user is active for its connect user\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/connectusergroupinput/",
	"title": "ConnectUserGroupInput",
	"tags": [],
	"description": "",
	"content": " group related to a connect user\nGraphQL Schema definition type ConnectUserGroupInput {\r\rgroupCode: String! \r\r\risActive: Boolean! \r\r}\r\r\rFields groupCode(String!):\rgroup code of the group related to this connect user\r\risActive(Boolean!):\rIndicates if the connect user is active for its connect user\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/contact/",
	"title": "Contact",
	"tags": [],
	"description": "",
	"content": " Contact type\nGraphQL Schema definition type Contact {\r\remail: String \r\r\rtelephone: String \r\r\rfax: String \r\r\rweb: URI! \r\r}\r\r\rFields email(String):\rEmail.\r\rtelephone(String):\rTelephone.\r\rfax(String):\rFax.\r\rweb(URI!):\rWeb.\r\r\nRequire by HotelData: \rHotel data\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/country/",
	"title": "Country",
	"tags": [],
	"description": "",
	"content": " The Country type represents Country values. A good example might be a Passenger Nationality. In queries or mutations, Country fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes \u0026ldquo;ES\u0026rdquo;.\nGraphQL Schema definition scalar Country\r\r\rRequire by Location: \rLocation\r\rHotelCriteriaSearchInput: \rCriteria of search contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\r\rCriteriaSearch: \rCriteria of search contains destination, travel dates and the number of pax in each room.\r\rDefaultSettings: \r\r\rDefaultSettingsInput: \r\r\r "
},
{
	"uri": "/travelgatex/reference/inputobjects/creategroupinput/",
	"title": "CreateGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type CreateGroupInput {\r\rcode: String! \r\r\rtype: GroupType! \r\r\rinfo: String \r\r\rparent: ID! \r\r\rtemplate: Template \r\r}\r\r\rFields code(String!):\r\r\rtype(GroupType!):\r\r\rinfo(String):\r\r\rparent(ID!):\r\r\rtemplate(Template):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/creatememberinput/",
	"title": "CreateMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type CreateMemberInput {\r\rcode: String \r\r\rinfo: String \r\r\rtype: MemberType! \r\r\rgroup: String! \r\r\rroles: [String!]! \r\r\rresource: String! \r\r}\r\r\rFields code(String):\r\r\rinfo(String):\r\r\rtype(MemberType!):\r\r\rgroup(String!):\r\r\rroles([String!]!):\r\r\rresource(String!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/criteriabookingdatesinput/",
	"title": "CriteriaBookingDatesInput",
	"tags": [],
	"description": "",
	"content": " Criteria by dates\nGraphQL Schema definition type CriteriaBookingDatesInput {\r\rdateType: DateType! \r\r\rstart: Date! \r\r\rend: Date! \r\r}\r\r\rFields dateType(DateType!):\rType of date. Can be Arrival or Booking date.\r\rstart(Date!):\rStart date. Format: yyyy-MM-dd.\r\rend(Date!):\rEnd date. Format: yyyy-MM-dd.\r\r\nRequire by HotelCriteriaBookingInput: \rCriteria of book contains basic information to find a book or books.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/criteriabookingreferencesinput/",
	"title": "CriteriaBookingReferencesInput",
	"tags": [],
	"description": "",
	"content": " Criteria by references\nGraphQL Schema definition type CriteriaBookingReferencesInput {\r\rhotelCode: String! \r\r\rcurrency: Currency! \r\r\rreferences: [BookReferenceInput!]! \r\r}\r\r\rFields hotelCode(String!):\rThe hotel code.\r\rcurrency(Currency!):\rThe requested currency. The API will convert to this currency if supplier returns a different one.\r\rreferences([BookReferenceInput!]!):\rContains the client reference and/or supplier reference.\r\r\nRequire by HotelCriteriaBookingInput: \rCriteria of book contains basic information to find a book or books.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/criteriasearch/",
	"title": "CriteriaSearch",
	"tags": [],
	"description": "",
	"content": " Criteria of search contains destination, travel dates and the number of pax in each room.\nGraphQL Schema definition type CriteriaSearch {\r\rcheckIn: Date! \r\r\rcheckOut: Date! \r\r\rhotels: [String!]! \r\r\roccupancies: [RoomCriteria!]! \r\r\rlanguage: Language \r\r\rcurrency: Currency \r\r\rnationality: Country \r\r\rmarket: String! \r\r}\r\r\rFields checkIn(Date!):\rCheck-in date for the booking. Format: yyyy-MM-dd\r\rcheckOut(Date!):\rCheck-out, date for the booking. Format: yyyy-MM-dd\r\rhotels([String!]!):\rContains the list of hotels\u0026#39;s ID.\r\roccupancies([RoomCriteria!]!):\rFor multi room bookings, this array will contain multiple elements (rooms). For each room you have to specify its own occupancy.\r\rlanguage(Language):\rLanguage to be used in request.\r\rcurrency(Currency):\rCurrency requested if supported by supplier.\r\rnationality(Country):\rNationality of the guest (use ISO3166_1_alfa_2).\r\rmarket(String!):\rTargeted zone, country or point of sale to be used in request.\r\r\nRequire by HotelSearch: \rResults of Avail Hotel. Contains all the available options for a given date and itinerary.\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/currency/",
	"title": "Currency",
	"tags": [],
	"description": "",
	"content": " The Currenty type represents Currency values. A good example might be a Rate Price Currency. In queries or mutations, Currency fields have to be specified in ISO 4217 format with enclosing double quotes \u0026ldquo;EUR\u0026rdquo;.\nGraphQL Schema definition scalar Currency\r\r\rRequire by HotelCriteriaSearchInput: \rCriteria of search contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\r\rCriteriaSearch: \rCriteria of search contains destination, travel dates and the number of pax in each room.\r\rPrice: \rPrice indicates the value of the room/option. Supplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.\r\rPriceable: \r\r\rExchange: \rInforms about the currency of origin, and the rate applied over result returned by the supplier.\r\rMarkup: \rInforms markup applied over supplier price.\r\rCancelPenalty: \rContains information about a cancel penalty.\r\rCriteriaBookingReferencesInput: \rCriteria by references\r\rDefaultSettings: \r\r\rDefaultSettingsInput: \r\r\r "
},
{
	"uri": "/travelgatex/reference/scalars/date/",
	"title": "Date",
	"tags": [],
	"description": "",
	"content": " The Date type represents Date values. A good example might be a Hotel CheckIn Date. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22\u0026rdquo;.\nGraphQL Schema definition scalar Date\r\r\rRequire by HotelCriteriaSearchInput: \rCriteria of search contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\r\rCriteriaSearch: \rCriteria of search contains destination, travel dates and the number of pax in each room.\r\rPriceBreakdown: \rInformation about daily price.\r\rRatePlan: \rInformation about the rate of the option returned.\r\rPromotion: \rInformation about room promotions(offers).\r\rSupplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\rCriteriaBookingDatesInput: \rCriteria by dates\r\rBookingHotel: \r\r\r "
},
{
	"uri": "/travelgatex/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22T13:57:31.123Z\u0026rdquo;.\nGraphQL Schema definition scalar DateTime\r\r\rRequire by Hotel: \rHotel type\r\rNode: \r\r\rMedia: \r\r\rAmenity: \r\r\rStat: \r\r\rAuditData: \rData sent \u0026amp; received in the supplierâ€™s native format.\r\rTransactions: \rSupplier transaction\r\rOrganization: \r\r\rMember: \r\r\rGroup: \r\r\rAPI: \r\r\rResource: \r\r\rRole: \r\r\rProduct: \r\r\rAccess: \r\r\rSupplier: \r\r\r "
},
{
	"uri": "/travelgatex/reference/enums/datetype/",
	"title": "DateType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of dates\nGraphQL Schema definition \renum\rDateType{\r\r\rARRIVAL,\r\r\r\rBOOKING,\r\r\r} \r Require by CriteriaBookingDatesInput: \rCriteria by dates\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/defaultsettings/",
	"title": "DefaultSettings",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type DefaultSettings {\r\rconnectUser: String! \r\r\rcontext: String \r\r\rlanguage: Language! \r\r\rcurrency: Currency! \r\r\rnationality: Country! \r\r\rmarket: String! \r\r\rtimeouts: Timeout! \r\r\rbusinessRules: BusinessRules! \r\r}\r\r\rFields connectUser(String!):\rThis field is got only if the authorization header is of the type JWT. It is used for to change the user that has been set by default in the preload.\r\rcontext(String):\rIndicates the context of the I/O codes (hotel, board, room and rates)\r\rlanguage(Language!):\rLanguage to be used in request.\r\rcurrency(Currency!):\rCurrency requested if supported by supplier.\r\rnationality(Country!):\rNationality of the guest (use ISO3166_1_alfa_2).\r\rmarket(String!):\rTargeted zone, country or point of sale to be used in request.\r\rtimeouts(Timeout!):\rGroup of timeouts to be used in the differents services\r\rbusinessRules(BusinessRules!):\rBusiness rules.\r\r\nRequire by Query: \r\r\rMutation: \rMutations are operations that change or update data in the server.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/defaultsettingsbusinessrulesinput/",
	"title": "DefaultSettingsBusinessRulesInput",
	"tags": [],
	"description": "",
	"content": " Input delta price, indicates the price variation permitted by the client before failing the booking.\nGraphQL Schema definition type DefaultSettingsBusinessRulesInput {\r\roptionsQuota: Int! \r\r\rbusinessRulesType: BusinessRulesType! \r\r}\r\r\rFields optionsQuota(Int!):\rOptions quota per avail. Numbers of options wanted by avail.\r\rbusinessRulesType(BusinessRulesType!):\rDifferent business rules to filter the options that you are interested.\r\r\nRequire by DefaultSettingsInput: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/defaultsettingsinput/",
	"title": "DefaultSettingsInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type DefaultSettingsInput {\r\rgroupCode: String! \r\r\rconnectUser: String! \r\r\rcontext: String \r\r\rlanguage: Language! \r\r\rcurrency: Currency! \r\r\rnationality: Country! \r\r\rmarket: String! \r\r\rtimeout: TimeoutInput! \r\r\rbusinessRules: DefaultSettingsBusinessRulesInput! \r\r}\r\r\rFields groupCode(String!):\rUnique Id\r\rconnectUser(String!):\rThis field is got only if the authorization header is of the type JWT. It is used for to change the user that has been set by default in the preload.\r\rcontext(String):\rIndicates the context of the I/O codes (hotel, board, room and rates)\r\rlanguage(Language!):\rLanguage to be used in request.\r\rcurrency(Currency!):\rCurrency requested if supported by supplier.\r\rnationality(Country!):\rNationality of the guest (use ISO3166_1_alfa_2).\r\rmarket(String!):\rTargeted zone, country or point of sale to be used in request.\r\rtimeout(TimeoutInput!):\rGroup of timeouts to be used in the differents services\r\rbusinessRules(DefaultSettingsBusinessRulesInput!):\rBusiness rules.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/deletegroupinput/",
	"title": "DeleteGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type DeleteGroupInput {\r\rcode: ID! \r\r}\r\r\rFields code(ID!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/deletememberinput/",
	"title": "DeleteMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type DeleteMemberInput {\r\rcode: ID! \r\r\rgroup: ID! \r\r}\r\r\rFields code(ID!):\r\r\rgroup(ID!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/deltapriceinput/",
	"title": "DeltaPriceInput",
	"tags": [],
	"description": "",
	"content": " Input delta price, indicates price variation permitted by the client\nGraphQL Schema definition type DeltaPriceInput {\r\ramount: Float \r\r\rpercent: Float \r\r\rapplyBoth: Boolean! \r\r}\r\r\rFields amount(Float):\rThe amount in the currency returned by the option that will be accepted by the client to be higher than the valuation price.\r\rpercent(Float):\rThe percentage accepted by the client to be higher than the valuation price.\r\rapplyBoth(Boolean!):\rIndicates that the range between valuation price and the new price does not exceed the amount and/or porcentage indicated by the client.\r\r\nRequire by HotelBookInput: \rCriteria of book.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/destination/",
	"title": "Destination",
	"tags": [],
	"description": "",
	"content": " Destination type\nGraphQL Schema definition type Destination {\r\rcode: String \r\r\rname: String \r\r\ravail: Boolean! \r\r}\r\r\rFields code(String):\rDestination code.\r\rname(String):\rDestination name.\r\ravail(Boolean!):\rIndicates if it is allowed in availability.\r\r\nRequire by HotelData: \rHotel data\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/durationtype/",
	"title": "DurationType",
	"tags": [],
	"description": "",
	"content": " Duration Type\nGraphQL Schema definition \renum\rDurationType{\r\r\rRANGE,\r\r\r\rOPEN,\r\r\r} \r Require by Supplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\r\n"
},
{
	"uri": "/admin/connect/entities/",
	"title": "Entities",
	"tags": [],
	"description": "AdminX Information",
	"content": ""
},
{
	"uri": "/travelgatex/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " Application errors\nGraphQL Schema definition type Error {\r\rcode: String! \r\r\rtype: String! \r\r\rdescription: String! \r\r}\r\r\rFields code(String!):\rError code\r\rtype(String!):\rError type\r\rdescription(String!):\rError description\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/exchange/",
	"title": "Exchange",
	"tags": [],
	"description": "",
	"content": " Informs about the currency of origin, and the rate applied over result returned by the supplier.\nGraphQL Schema definition type Exchange {\r\rcurrency: Currency! \r\r\rrate: Float! \r\r}\r\r\rFields currency(Currency!):\rInforms about the currency of origin.\r\rrate(Float!):\rInforms about the rate applied over result.\r\r\nRequire by Price: \rPrice indicates the value of the room/option. Supplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.\r\rPriceable: \r\r\rMarkup: \rInforms markup applied over supplier price.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/expiredateinput/",
	"title": "ExpireDateInput",
	"tags": [],
	"description": "",
	"content": " The card expiration date\nGraphQL Schema definition type ExpireDateInput {\r\rmonth: Int! \r\r\ryear: Int! \r\r}\r\r\rFields month(Int!):\rMonth MM\r\ryear(Int!):\rYear yy\r\r\nRequire by PaymentCardInput: \rInput PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/filterinput/",
	"title": "FilterInput",
	"tags": [],
	"description": "",
	"content": " Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026rsquo;t specified anything. If input both, you will receive a validation error that indicates this error.\nGraphQL Schema definition type FilterInput {\r\raccess: AccessFilterInput \r\r\rrateRules: RateRulesFilterInput \r\r}\r\r\rFields access(AccessFilterInput):\rYou can specify one of the filters or any of them. In this latter case, all the configurated accesses will be executed.\r\rrateRules(RateRulesFilterInput):\rIf requested, only options with the specified rateRules will be returned\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/float/",
	"title": "Float",
	"tags": [],
	"description": "",
	"content": " The Float scalar type represents signed double-precision fractional values as specified by IEEE 754.\nGraphQL Schema definition scalar Float\r\r\rRequire by Stat: \r\r\rAuditData: \rData sent \u0026amp; received in the supplierâ€™s native format.\r\rPrice: \rPrice indicates the value of the room/option. Supplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.\r\rPriceable: \r\r\rExchange: \rInforms about the currency of origin, and the rate applied over result returned by the supplier.\r\rMarkup: \rInforms markup applied over supplier price.\r\rRule: \r\r\rCancelPenalty: \rContains information about a cancel penalty.\r\rDeltaPriceInput: \rInput delta price, indicates price variation permitted by the client\r\r "
},
{
	"uri": "/travelgatex/reference/objects/geocode/",
	"title": "Geocode",
	"tags": [],
	"description": "",
	"content": " Geocode type\nGraphQL Schema definition type Geocode {\r\rlatitude: String! \r\r\rlongitude: String! \r\r}\r\r\rFields latitude(String!):\rLatitude\r\rlongitude(String!):\rLongitude\r\r\nRequire by Location: \rLocation\r\r\n"
},
{
	"uri": "/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Welcome to TravelgateX! Get familiar with the TravelgateX products and explore their features:\n\t\rOverview\rLearn the basics\n\r\r\r\t\rQuickstart\rTry the API now\n\r\r\r\t\rConcepts\rUnderstanding the concepts\n\r\r\r\t\rPlayground\rTry our API\n\r\r\r\r"
},
{
	"uri": "/travelgatex/reference/objects/giataid/",
	"title": "GiataID",
	"tags": [],
	"description": "",
	"content": " Giata System ID.\nGraphQL Schema definition type GiataID {\r\rcode: String \r\r}\r\r\rFields code(String):\rGiata url. source: URI! Giata code\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/group/",
	"title": "Group",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Group {\r\rcode: ID! \r\r\rerror: [Error!] \r\r\rgroupData: GroupData \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rerror([Error!]):\r\r\rgroupData(GroupData):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequire by GroupEdge: \r\r\rGroupData: \r\r\rAdminMutation: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/groupaccess/",
	"title": "GroupAccess",
	"tags": [],
	"description": "",
	"content": " Pair of groups and accesses. All accesses returned will belong to all the groups in groupCodes\nGraphQL Schema definition type GroupAccess {\r\rgroupCodes: [String!]! \r\r\raccesses: [Access!] \r\r}\r\r\rFields groupCodes([String!]!):\rgroup identifiers\r\raccesses([Access!]):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/groupaccessinput/",
	"title": "GroupAccessInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type GroupAccessInput {\r\rgroupCodes: [String!] \r\r\raccesses: [AccessConfigurationInput!]! \r\r}\r\r\rFields groupCodes([String!]):\rgroups identifiers in which the access will be associated\r\raccesses([AccessConfigurationInput!]!):\raccess related data\r\r\n"
},
{
	"uri": "/travelgatex/reference/interfaces/groupcommondata/",
	"title": "GroupCommonData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface GroupCommonData {\r\rid: ID! \r\r\rcode: ID! \r\r\rtype: GroupType! \r\r\rinfo: String \r\r\rowner: Member \r\r\risEditable: Boolean! \r\r\rmembers(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): MemberConnection \r\r\rapis(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): APIConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rtype(GroupType!):\r\r\rinfo(String):\r\r\rowner(Member):\r\r\risEditable(Boolean!):\r\r\rmembers(MemberConnection):\r\r\rapis(APIConnection):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/groupconnection/",
	"title": "GroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type GroupConnection {\r\redges: [GroupEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([GroupEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequire by AdminQuery: \r\r\rMemberData: \r\r\rAPIData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/groupdata/",
	"title": "GroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type GroupData {\r\rid: ID! \r\r\rcode: ID! \r\r\rtype: GroupType! \r\r\rinfo: String \r\r\rparent: Group \r\r\rowner: Member \r\r\risEditable: Boolean! \r\r\rproductId: Int \r\r\rresourceId: Int \r\r\rmembers(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): MemberConnection \r\r\rapis(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): APIConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rtype(GroupType!):\r\r\rinfo(String):\r\r\rparent(Group):\r\r\rowner(Member):\r\r\risEditable(Boolean!):\r\r\rproductId(Int):\r\r\rresourceId(Int):\r\r\rmembers(MemberConnection):\r\r\rapis(APIConnection):\r\r\r\nRequire by Group: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/groupedge/",
	"title": "GroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type GroupEdge {\r\rcursor: String! \r\r\rnode: Group \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Group):\r\r\r\nRequire by GroupConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/grouptype/",
	"title": "GroupType",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition \renum\rGroupType{\r\r\rGROUP,\r\r\r\rPROFILE,\r\r\r\rTEAM,\r\r\r\rFOLDER,\r\r\r\rPRODUCT,\r\r\r\rRESOURCE,\r\r\r\rSPECIFIC_RESOURCE,\r\r\r} \r Require by OrganizationData: \r\r\rGroupCommonData: \r\r\rGroupData: \r\r\rCreateGroupInput: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/holder/",
	"title": "Holder",
	"tags": [],
	"description": "",
	"content": " Holder object that contains the pax name and surname.\nGraphQL Schema definition type Holder {\r\rname: String! \r\r\rsurname: String! \r\r}\r\r\rFields name(String!):\rHolder\u0026#39;s name\r\rsurname(String!):\rHolder\u0026#39;s surname\r\r\nRequire by HotelBookingDetail: \rContains information about booking.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/holderinput/",
	"title": "HolderInput",
	"tags": [],
	"description": "",
	"content": " Holder object that contains the pax name and surname.\nGraphQL Schema definition type HolderInput {\r\rname: String! \r\r\rsurname: String! \r\r}\r\r\rFields name(String!):\rThe card holder\u0026#39;s name\r\rsurname(String!):\rThe card holder\u0026#39;s surname\r\r\nRequire by HotelBookInput: \rCriteria of book.\r\rPaymentCardInput: \rInput PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotel/",
	"title": "Hotel",
	"tags": [],
	"description": "",
	"content": " Hotel type\nGraphQL Schema definition type Hotel {\r\rcode: ID! \r\r\rhotelData: HotelData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\rHotel ID\r\rhotelData(HotelData):\rHotel data\r\rerror([Error!]):\rErrors that will lead the service to abort\r\rcreatedAt(DateTime!):\rCreate date\r\rupdatedAt(DateTime!):\rUpdate date\r\r\nRequire by HotelEdge: \rHotelList Edge definition\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelbookinput/",
	"title": "HotelBookInput",
	"tags": [],
	"description": "",
	"content": " Criteria of book.\nGraphQL Schema definition type HotelBookInput {\r\roptionRefId: String! \r\r\rlanguage: Language \r\r\rclientReference: String! \r\r\rdeltaPrice: DeltaPriceInput \r\r\rpaymentCard: PaymentCardInput \r\r\rremarks: String \r\r\rholder: HolderInput! \r\r\rrooms: [BookRoomInput!]! \r\r}\r\r\rFields optionRefId(String!):\rOption ID\r\rlanguage(Language):\rLanguage to be used in request.\r\rclientReference(String!):\rBooking ID in client\u0026#39;s system.\r\rdeltaPrice(DeltaPriceInput):\rIndicates price variation permitted by the client.\r\rpaymentCard(PaymentCardInput):\rIf the payment is done by credit card, it\u0026#39;s mandatory to specify the payment type and the credit card information.\r\rremarks(String):\rAny customer comments for the supplier to consider.\r\rholder(HolderInput!):\rHolder\u0026#39;s basic information.\r\rrooms([BookRoomInput!]!):\rRooms within this option.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelbookpayload/",
	"title": "HotelBookPayload",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type HotelBookPayload {\r\rstats(\rtoken: String!,\r): RequestStats \r\r\rauditData: AuditData \r\r\rbooking: HotelBookingDetail \r\r\rerrors: [Error!] \r\r\rwarnings: [Warning!] \r\r}\r\r\rFields stats(RequestStats):\rApplication stats in string format\r\rauditData(AuditData):\rData sent \u0026amp; received in the supplier\u0026#39;s native format.\r\rbooking(HotelBookingDetail):\rInformation about booking\r\rerrors([Error!]):\rErrors that will lead the service to abort\r\rwarnings([Warning!]):\rPotentially harmful situations or errors that won\u0026#39;t force the service to abort\r\r\nRequire by Mutation: \rMutations are operations that change or update data in the server.\r\rHotelXMutation: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelbooking/",
	"title": "HotelBooking",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type HotelBooking {\r\rstats(\rtoken: String!,\r): RequestStats \r\r\rauditData: AuditData \r\r\rbookings: [HotelBookingDetail!] \r\r\rerrors: [Error!] \r\r\rwarnings: [Warning!] \r\r}\r\r\rFields stats(RequestStats):\rApplication stats in string format\r\rauditData(AuditData):\rData sent \u0026amp; received in the supplier\u0026#39;s native format.\r\rbookings([HotelBookingDetail!]):\rDetails about booking\r\rerrors([Error!]):\rErrors that will lead the service to abort\r\rwarnings([Warning!]):\rPotentially harmful situations or errors that won\u0026#39;t force the service to abort\r\r\nRequire by HotelXQuery: \r\r\rBooking: \rReturns detailed information about books.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelbookingdetail/",
	"title": "HotelBookingDetail",
	"tags": [],
	"description": "",
	"content": " Contains information about booking.\nGraphQL Schema definition type HotelBookingDetail {\r\rreference: Reference! \r\r\rholder: Holder \r\r\rhotel: BookingHotel \r\r\rprice: Price \r\r\rcancelPolicy: CancelPolicy \r\r\rremarks: String \r\r\rstatus: BookStatusType! \r\r\rpayable: String \r\r\raddOns: AddOns \r\r}\r\r\rFields reference(Reference!):\rBooking ID in the Supplier\u0026#39;s system\r\rholder(Holder):\rHolder\u0026#39;s name and surname\r\rhotel(BookingHotel):\rInformation about the hotel.\r\rprice(Price):\rSpecifies the prices (Gross, Net and Amount) of the option returned.\r\rcancelPolicy(CancelPolicy):\rSpecifies cancel policies of the book returned.\r\rremarks(String):\rAdditional information about the book.\r\rstatus(BookStatusType!):\rBooking Status.\r\rpayable(String):\rPayable.\r\raddOns(AddOns):\rExtra information about the option.\r\r\nRequire by HotelBookPayload: \r\r\rHotelCancelDetail: \rContains information about cancel\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelcanceldetail/",
	"title": "HotelCancelDetail",
	"tags": [],
	"description": "",
	"content": " Contains information about cancel\nGraphQL Schema definition type HotelCancelDetail {\r\rreference: Reference \r\r\rcancelReference: String \r\r\rstatus: BookStatusType \r\r\rprice: Price \r\r\rbooking: HotelBookingDetail \r\r}\r\r\rFields reference(Reference):\rBooking ID in the Supplier\u0026#39;s system\r\rcancelReference(String):\rCancellation ID in the Supplier\u0026#39;s system\r\rstatus(BookStatusType):\rBooking Status.\r\rprice(Price):\rSpecifies the prices (Gross, Net and Amount) of the cancellation.\r\rbooking(HotelBookingDetail):\rInformation about the booking.\r\r\nRequire by HotelCancelPayload: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcancelinput/",
	"title": "HotelCancelInput",
	"tags": [],
	"description": "",
	"content": " Cancellation Criteria.\nGraphQL Schema definition type HotelCancelInput {\r\raccessCode: String! \r\r\rlanguage: Language \r\r\rhotelCode: String! \r\r\rreference: BookReferenceInput! \r\r}\r\r\rFields accessCode(String!):\rThe name of the access to use in the request.\r\rlanguage(Language):\rThe language code.\r\rhotelCode(String!):\rThe hotel code.\r\rreference(BookReferenceInput!):\rContains the client reference and/or supplier reference. One of them is mandatory.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelcancelpayload/",
	"title": "HotelCancelPayload",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type HotelCancelPayload {\r\rstats(\rtoken: String!,\r): RequestStats \r\r\rauditData: AuditData \r\r\rcancellation: HotelCancelDetail \r\r\rerrors: [Error!] \r\r\rwarnings: [Warning!] \r\r}\r\r\rFields stats(RequestStats):\rApplication stats in string format\r\rauditData(AuditData):\rData sent \u0026amp; received in the supplier\u0026#39;s native format.\r\rcancellation(HotelCancelDetail):\rInformation about cancel\r\rerrors([Error!]):\rErrors that will lead the service to abort\r\rwarnings([Warning!]):\rPotentially harmful situations or errors that won\u0026#39;t force the service to abort\r\r\nRequire by Mutation: \rMutations are operations that change or update data in the server.\r\rHotelXMutation: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelconnection/",
	"title": "HotelConnection",
	"tags": [],
	"description": "",
	"content": " HotelList definition\nGraphQL Schema definition type HotelConnection {\r\redges: [HotelEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([HotelEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequire by HotelXQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcriteriabookinginput/",
	"title": "HotelCriteriaBookingInput",
	"tags": [],
	"description": "",
	"content": " Criteria of book contains basic information to find a book or books.\nGraphQL Schema definition type HotelCriteriaBookingInput {\r\raccessCode: String! \r\r\rlanguage: Language \r\r\rtypeSearch: BookingCriteriaType! \r\r\rreferences: CriteriaBookingReferencesInput \r\r\rdates: CriteriaBookingDatesInput \r\r}\r\r\rFields accessCode(String!):\rName of the access that have to use in the request.\r\rlanguage(Language):\rThe language code.\r\rtypeSearch(BookingCriteriaType!):\rThe search type criteria.\r\rreferences(CriteriaBookingReferencesInput):\rThe references criteria.\r\rdates(CriteriaBookingDatesInput):\rThe dates criteria.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcriteriaquoteinput/",
	"title": "HotelCriteriaQuoteInput",
	"tags": [],
	"description": "",
	"content": " The quote criteria contains the option reference id, block and language.\nGraphQL Schema definition type HotelCriteriaQuoteInput {\r\roptionRefId: String! \r\r\rlanguage: Language \r\r}\r\r\rFields optionRefId(String!):\rIdentifier of the option chosen in the search.\r\rlanguage(Language):\rLanguage to be used in request.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcriteriasearchinput/",
	"title": "HotelCriteriaSearchInput",
	"tags": [],
	"description": "",
	"content": " Criteria of search contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\nGraphQL Schema definition type HotelCriteriaSearchInput {\r\rcheckIn: Date! \r\r\rcheckOut: Date! \r\r\rhotels: [String!]! \r\r\roccupancies: [RoomInput!]! \r\r\rlanguage: Language \r\r\rcurrency: Currency \r\r\rnationality: Country \r\r\rmarket: String \r\r}\r\r\rFields checkIn(Date!):\rCheck-in date for the booking. Format: yyyy-MM-dd\r\rcheckOut(Date!):\rCheck-out, date for the booking. Format: yyyy-MM-dd\r\rhotels([String!]!):\rContains the list of hotels\u0026#39;s ID.\r\roccupancies([RoomInput!]!):\rFor multi room bookings, this array will contain multiple elements (rooms). For each room you have to specify its own occupancy.\r\rlanguage(Language):\rLanguage to be used in request.\r\rcurrency(Currency):\rCurrency requested if supported by supplier.\r\rnationality(Country):\rNationality of the guest (use ISO3166_1_alfa_2).\r\rmarket(String):\rTargeted zone, country or point of sale to be used in request.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hoteldata/",
	"title": "HotelData",
	"tags": [],
	"description": "",
	"content": " Hotel data\nGraphQL Schema definition type HotelData {\r\rcode: ID! \r\r\rname: String! \r\r\rcategoryCode: String! \r\r\rexclusiveDeal: Boolean! \r\r\rmedias(\r\r\r\rtype: ApplicationArea,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): MediaConnection \r\r\ramenities(\r\r\r\rlanguage: Language,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): AmenityConnection \r\r\radditionalInformation(\rlanguage: Language,\r): Information! \r\r\rgeneralDescription(\rlanguage: Language,\r): Information! \r\r\rlocation: Location! \r\r\rcontact: Contact! \r\r\rdestination: Destination! \r\r}\r\r\rFields code(ID!):\rInternal code to perform availability and/or supplier code.\r\rname(String!):\rName.\r\rcategoryCode(String!):\rHotel category (for example number of stars).\r\rexclusiveDeal(Boolean!):\rIndicates that the Hotel has an Exclusive Deal.\r\rmedias(MediaConnection):\r\r\ramenities(AmenityConnection):\r\r\radditionalInformation(Information!):\r\r\rgeneralDescription(Information!):\r\r\rlocation(Location!):\r\r\rcontact(Contact!):\rContact information.\r\rdestination(Destination!):\rDestination information.\r\r\nRequire by Hotel: \rHotel type\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hoteledge/",
	"title": "HotelEdge",
	"tags": [],
	"description": "",
	"content": " HotelList Edge definition\nGraphQL Schema definition type HotelEdge {\r\rcursor: String! \r\r\rnode: Hotel \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Hotel):\r\r\r\nRequire by HotelConnection: \rHotelList definition\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelinput/",
	"title": "HotelInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type HotelInput {\r\rcodes: [ID!] \r\r\rlanguage: Language \r\r}\r\r\rFields codes([ID!]):\r\r\rlanguage(Language):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hoteloptionquote/",
	"title": "HotelOptionQuote",
	"tags": [],
	"description": "",
	"content": " Contains information about quote.\nGraphQL Schema definition type HotelOptionQuote {\r\roptionRefId: String! \r\r\rstatus: StatusType! \r\r\rprice: Price! \r\r\rcancelPolicy: CancelPolicy! \r\r\rremarks: String \r\r\rsurcharges: [Surcharge!] \r\r\rcardTypes: [String!] \r\r\raddOns: AddOns \r\r}\r\r\rFields optionRefId(String!):\rIndicates the valuation key\r\rstatus(StatusType!):\rThe possible values in status in response are Available (OK) or On Request (RQ).\r\rprice(Price!):\rSpecifies the prices (Gross, Net and Amount) of the option returned.\r\rcancelPolicy(CancelPolicy!):\rSpecifies cancel policies of the option returned.\r\rremarks(String):\rAdditional information about the option.\r\rsurcharges([Surcharge!]):\rList of surcharges of the option returned.\r\rcardTypes([String!]):\rList of credit cards\r\raddOns(AddOns):\rExtra information about the option.\r\r\nRequire by HotelQuote: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hoteloptionsearch/",
	"title": "HotelOptionSearch",
	"tags": [],
	"description": "",
	"content": " An option includes hotel information, meal plan, total price, conditions and room description.\nGraphQL Schema definition type HotelOptionSearch {\r\rsupplierCode: String! \r\r\raccessCode: String! \r\r\rmarket: String! \r\r\rhotelCode: String! \r\r\rhotelCodeSupplier: String! \r\r\rhotelName: String \r\r\rboardCode: String! \r\r\rboardCodeSupplier: String! \r\r\rpaymentType: PaymentType! \r\r\rstatus: StatusType! \r\r\roccupancies: [Occupancy!]! \r\r\rrooms: [Room!]! \r\r\rprice: Price! \r\r\rsupplements: [Supplement!] \r\r\rsurcharges: [Surcharge!] \r\r\rrateRules: [RateRulesType!] \r\r\rcancelPolicy: CancelPolicy \r\r\rremarks: String \r\r\raddOns: AddOns \r\r\rtoken: String! \r\r\rid: String! \r\r}\r\r\rFields supplierCode(String!):\rSupplier that offers this option.\r\raccessCode(String!):\rAccess code of this option.\r\rmarket(String!):\rMarket of this option.\r\rhotelCode(String!):\rCode of the hotel in the context selected.\r\rhotelCodeSupplier(String!):\rSupplier\u0026#39;s hotel code.\r\rhotelName(String):\rName of the hotel.\r\rboardCode(String!):\rCode of the board in the context selected.\r\rboardCodeSupplier(String!):\rSupplier\u0026#39;s board code.\r\rpaymentType(PaymentType!):\rIndicates the payment type of the option returned. Possible options: Merchant, Direct, Card Booking, Card check in and Mixed.\r\rstatus(StatusType!):\rThe possible values in status in response are Available (OK) or On Request (RQ).\r\roccupancies([Occupancy!]!):\rList of occupancies of the request.\r\rrooms([Room!]!):\rList of rooms of the option returned.\r\rprice(Price!):\rSpecifies the prices (Gross, Net and Amount) of the option returned.\r\rsupplements([Supplement!]):\rList of supplements of the option returned.\r\rsurcharges([Surcharge!]):\rList of surcharges of the option returned.\r\rrateRules([RateRulesType!]):\rSpecifies rate rules of the option returned.\r\rcancelPolicy(CancelPolicy):\rSpecifies cancel policies of the option returned.\r\rremarks(String):\rAdditional information about the option.\r\raddOns(AddOns):\rExtra information about the option.\r\rtoken(String!):\rToken for Deep Link\r\rid(String!):\rIndicates the quote key\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelquote/",
	"title": "HotelQuote",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type HotelQuote {\r\rstats(\rtoken: String!,\r): RequestStats \r\r\rauditData: AuditData \r\r\roptionQuote: HotelOptionQuote \r\r\rerrors: [Error!] \r\r\rwarnings: [Warning!] \r\r}\r\r\rFields stats(RequestStats):\rApplication stats in string format\r\rauditData(AuditData):\rData sent \u0026amp; received in the supplier\u0026#39;s native format.\r\roptionQuote(HotelOptionQuote):\rInformation about quote.\r\rerrors([Error!]):\rErrors that will lead the service to abort\r\rwarnings([Warning!]):\rPotentially harmful situations or errors that won\u0026#39;t force the service to abort\r\r\nRequire by HotelXQuery: \r\r\rQuote: \rReturns the total price and cancellation policies of the Option selected in the previous step (Search).\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelsearch/",
	"title": "HotelSearch",
	"tags": [],
	"description": "",
	"content": " Results of Avail Hotel. Contains all the available options for a given date and itinerary.\nGraphQL Schema definition type HotelSearch {\r\rcontext: String! \r\r\rstats(\rtoken: String!,\r): RequestStats \r\r\rauditData: AuditData \r\r\rrequestCriteria: CriteriaSearch! \r\r\roptions: [HotelOptionSearch!] \r\r\rerrors: [Error!] \r\r\rwarnings: [Warning!] \r\r}\r\r\rFields context(String!):\rIndicates the context of the response.\r\rstats(RequestStats):\rApplication stats in string format\r\rauditData(AuditData):\rData sent \u0026amp; received in the supplier\u0026#39;s native format.\r\rrequestCriteria(CriteriaSearch!):\rRequest Criteria\r\roptions([HotelOptionSearch!]):\rList of options returned according to the request.\r\rerrors([Error!]):\rErrors that will lead the service to abort\r\rwarnings([Warning!]):\rPotentially harmful situations or errors that won\u0026#39;t force the service to abort\r\r\nRequire by HotelXQuery: \r\r\rSearch: \rAvailable options for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelsettingsinput/",
	"title": "HotelSettingsInput",
	"tags": [],
	"description": "",
	"content": " Settings that you can edit for this avail. Values are loaded by default in our Back Office.\nGraphQL Schema definition type HotelSettingsInput {\r\rcontext: String \r\r\ruseContext: Boolean \r\r\rconnectUser: String \r\r\rtimeout: Int \r\r\rauditTransactions: Boolean \r\r\rbusinessRules: BusinessRulesInput \r\r\rsuppliers: [SupplierInput!] \r\r\rplugins: [PluginStepInput!] \r\r}\r\r\rFields context(String):\rIndicates the context of the I/O codes (hotel, board, room and rates)\r\ruseContext(Boolean):\rIndicates if you want use context, or not, by default is true. @deprecated(reason: \u0026#34;deprecated from 2017-12-12. Redundant.\u0026#34;)\r\rconnectUser(String):\rThis field is got only if the authorization header is of the type JWT. It is used for to change the user that has been set by default in the preload.\r\rtimeout(Int):\rMilliseconds before the connection is closed.\r\rauditTransactions(Boolean):\rReturns all the transactions exchanged with the supplier.\r\rbusinessRules(BusinessRulesInput):\rBusiness rules.\r\rsuppliers([SupplierInput!]):\rArray of suppliers. Each one contains its own code, settings and accesses.\r\rplugins([PluginStepInput!]):\rArray of plugins to execute.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxmutation/",
	"title": "HotelXMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type HotelXMutation {\r\rbook(\rinput: HotelBookInput!,\rsettings: HotelSettingsInput,\r): HotelBookPayload \r\r\rcancel(\rinput: HotelCancelInput!,\rsettings: HotelSettingsInput,\r): HotelCancelPayload \r\r}\r\r\rFields book(HotelBookPayload):\rCreates a new hotel booking consisting of an option of 1 or more rooms.\r\rcancel(HotelCancelPayload):\rCancels an existing hotel booking consisting of an option of 1 or more rooms.\r\r\nRequire by Mutation: \rMutations are operations that change or update data in the server.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxquery/",
	"title": "HotelXQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type HotelXQuery {\r\rhotels(\r\r\r\rcodes: [String!],\r\r\r\r\rlanguage: String,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): HotelConnection! \r\r\rsearch(\r\r\r\rtoken: String,\r\r\r\r\rcriteria: HotelCriteriaSearchInput,\r\r\r\r\rsettings: HotelSettingsInput,\r\r\r\r\rfilter: FilterInput,\r\r\r\r\r): HotelSearch \r\r\rquote(\rcriteria: HotelCriteriaQuoteInput!,\rsettings: HotelSettingsInput,\r): HotelQuote \r\r\rbooking(\rcriteria: HotelCriteriaBookingInput!,\rsettings: HotelSettingsInput,\r): HotelBooking \r\r\rsearchStatusService: ServiceStatus! \r\r\rquoteStatusService: ServiceStatus! \r\r\rbookStatusService: ServiceStatus! \r\r\rcancelStatusService: ServiceStatus! \r\r\rbookingStatusService: ServiceStatus! \r\r}\r\r\rFields hotels(HotelConnection!):\rQuery to obtain Hotels\r\rsearch(HotelSearch):\rAvailable options of an hotel for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward. It only requires the criteria of search (destination, travel dates and the number of pax in each room). But you must preload the other fields in our system by complete the fields absents.\r\rquote(HotelQuote):\rReturns the total price and cancellation policies of the Option selected in the previous step (Search).\r\rbooking(HotelBooking):\rReturns detailed information about books, you can indicated a list of locators or a range date.\r\rsearchStatusService(ServiceStatus!):\rReturns status of the search service.\r\rquoteStatusService(ServiceStatus!):\rReturns status of the quote service.\r\rbookStatusService(ServiceStatus!):\rReturns status of the new booking service.\r\rcancelStatusService(ServiceStatus!):\rReturns status of the cancellation service.\r\rbookingStatusService(ServiceStatus!):\rTODO: me no understand... Returns status of the booking service.\r\r\nRequire by Query: \r\r\r\n"
},
{
	"uri": "/admin/account/iam/",
	"title": "IAM",
	"tags": [],
	"description": "AdminX Information",
	"content": ""
},
{
	"uri": "/travelgatex/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL Schema definition scalar ID\r\r\rRequire by Hotel: \rHotel type\r\rNode: \r\r\rHotelData: \rHotel data\r\rMedia: \r\r\rAmenity: \r\r\rAmenityData: \r\r\rAccessInput: \rAccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.\r\rOrganization: \r\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rMember: \r\r\rMemberData: \r\r\rGroup: \r\r\rGroupData: \r\r\rAPI: \r\r\rAPIData: \r\r\rResource: \r\r\rResourceData: \r\r\rRole: \r\r\rRoleData: \r\r\rProduct: \r\r\rProductData: \r\r\rCreateGroupInput: \r\r\rDeleteMemberInput: \r\r\rDeleteGroupInput: \r\r\rAccess: \r\r\rAccessData: \r\r\rSupplier: \r\r\rSupplierData: \r\r\rIdAccessConfigurationInput: \r\r\r "
},
{
	"uri": "/travelgatex/reference/inputobjects/idaccessconfigurationinput/",
	"title": "IdAccessConfigurationInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type IdAccessConfigurationInput {\r\rid: ID! \r\r\risActive: Boolean! \r\r\rcode: String! \r\r\rsupplier: String! \r\r\rconfiguration: ConfigurationInput \r\r}\r\r\rFields id(ID!):\raccess unique identifier\r\risActive(Boolean!):\rIndicates if the access is active.\r\rcode(String!):\rArbitrary not unique identifier\r\rsupplier(String!):\rSupplier to which this access belongs\r\rconfiguration(ConfigurationInput):\rInformation required to access the supplier\u0026#39;s system.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/idgroupaccessinput/",
	"title": "IdGroupAccessInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type IdGroupAccessInput {\r\rgroupCodes: [String!] \r\r\raccesses: [IdAccessConfigurationInput!]! \r\r}\r\r\rFields groupCodes([String!]):\ridentifier of the groups in which the access will be associated\r\raccesses([IdAccessConfigurationInput!]!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/interfaces/information/",
	"title": "Information",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface Information {\r\rdescription: String! \r\r\rlanguage: Language! \r\r}\r\r\rFields description(String!):\r\r\rlanguage(Language!):\r\r\r\nRequire by HotelData: \rHotel data\r\rAmenityData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL Schema definition scalar Int\r\r\rRequire by PaxInput: \rPax object that contains the pax age.\r\rHotelSettingsInput: \rSettings that you can edit for this avail. Values are loaded by default in our Back Office.\r\rBusinessRulesInput: \rList of business rules to use as filter on the options.\r\rSettingsBaseInput: \rContains the time out and business rules of a supplier or an access.\r\rPax: \rSpecifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.\r\rOccupancy: \rInformation about occupancy.\r\rRoom: \rContains the room information of the option returned.\r\rBed: \rContains information about a bed.\r\rSupplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\rCancelPenalty: \rContains information about a cancel penalty.\r\rBookingRoom: \r\r\rGroupData: \r\r\rTimeout: \r\r\rBusinessRules: \rList of business rules to filter the options that you are interested.\r\rExpireDateInput: \rThe card expiration date\r\rBookRoomInput: \rInput BookRoom contains list of pax and the room\u0026#39;s reference.\r\rBookPaxInput: \rInput BookPax contains basic information abaout pax suach as name, surname and age.\r\rTimeoutInput: \r\r\rDefaultSettingsBusinessRulesInput: \rInput delta price, indicates the price variation permitted by the client before failing the booking.\r\r "
},
{
	"uri": "/travelgatex/reference/scalars/json/",
	"title": "JSON",
	"tags": [],
	"description": "",
	"content": " The JSON type makes sure that it is actually valid JSON and returns the value as a parsed JSON object/array instead of a string. In queries or mutations, JSON fields have to be specified with enclosing double quotes. Special characters have to be escaped: \u0026ldquo;{\u0026ldquo;int\u0026rdquo;: 1, \u0026ldquo;string\u0026rdquo;: \u0026ldquo;value\u0026rdquo;}\u0026ldquo;.\nGraphQL Schema definition scalar JSON\r\r\rRequire by AddOns: \rExtra information about the option.\r\r "
},
{
	"uri": "/travelgatex/reference/scalars/language/",
	"title": "Language",
	"tags": [],
	"description": "",
	"content": " The Language type represents Language values. A good example might be a Hotel Description Language. In queries or mutations, Language fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes \u0026ldquo;es\u0026rdquo;.\nGraphQL Schema definition scalar Language\r\r\rRequire by Information: \r\r\rHotelCriteriaSearchInput: \rCriteria of search contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\r\rCriteriaSearch: \rCriteria of search contains destination, travel dates and the number of pax in each room.\r\rHotelCriteriaQuoteInput: \rThe quote criteria contains the option reference id, block and language.\r\rHotelCriteriaBookingInput: \rCriteria of book contains basic information to find a book or books.\r\rDefaultSettings: \r\r\rHotelBookInput: \rCriteria of book.\r\rHotelCancelInput: \rCancellation Criteria.\r\rDefaultSettingsInput: \r\r\rHotelInput: \r\r\r "
},
{
	"uri": "/travelgatex/reference/objects/location/",
	"title": "Location",
	"tags": [],
	"description": "",
	"content": " Location\nGraphQL Schema definition type Location {\r\raddress: String! \r\r\rcity: String! \r\r\rzipCode: String! \r\r\rcountry: Country! \r\r\rgeocode: Geocode! \r\r}\r\r\rFields address(String!):\rStreet Address\r\rcity(String!):\rCity\r\rzipCode(String!):\rZip Code\r\rcountry(Country!):\rCountry ISO Code\r\rgeocode(Geocode!):\rGeocode\r\r\nRequire by HotelData: \rHotel data\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/map/",
	"title": "Map",
	"tags": [],
	"description": "",
	"content": " Map codes.\nGraphQL Schema definition type Map {\r\rsupplierCode: String! \r\r\rcodes: [String!] \r\r}\r\r\rFields supplierCode(String!):\rSupplier code.\r\rcodes([String!]):\rEquivalences of the supplier for the client code.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/mapping/",
	"title": "Mapping",
	"tags": [],
	"description": "",
	"content": " Returns the mapping for a group.\nGraphQL Schema definition type Mapping {\r\rcontexts(\rcontextCodes: [String!],\rsupplierCodes: [String!],\r): [MappingContext!] \r\r}\r\r\rFields contexts([MappingContext!]):\rReturns the differents group contexts, you can filter by some contexts.\r\r\nRequire by Query: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/mappingcontext/",
	"title": "MappingContext",
	"tags": [],
	"description": "",
	"content": " Returns the differents group contexts\nGraphQL Schema definition type MappingContext {\r\rcontextCode: String! \r\r\rhotels(\rhotelCodes: [String!],\r): [MappingEntity!] \r\r\rrooms(\rroomCodes: [String!],\r): [MappingEntity!] \r\r\rrates(\rrateCodes: [String!],\r): [MappingEntity!] \r\r\rboards(\rBoardCodes: [String!],\r): [MappingEntity!] \r\r}\r\r\rFields contextCode(String!):\rCode of the context\r\rhotels([MappingEntity!]):\rMapping of hotels. Filter by hotel code.\r\rrooms([MappingEntity!]):\rMapping of rooms. Filter by room code.\r\rrates([MappingEntity!]):\rMapping of rates. Filter by rate code.\r\rboards([MappingEntity!]):\rMapping of boards. Filter by board code.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/mappingentity/",
	"title": "MappingEntity",
	"tags": [],
	"description": "",
	"content": " Mapping about client codes with the equivalence per supplier.\nGraphQL Schema definition type MappingEntity {\r\rcode: String! \r\r\rmaps: [Map!] \r\r}\r\r\rFields code(String!):\rClient code\r\rmaps([Map!]):\rSupplier code. Filter by supplier.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/markup/",
	"title": "Markup",
	"tags": [],
	"description": "",
	"content": " Informs markup applied over supplier price.\nGraphQL Schema definition type Markup {\r\rchannel: String \r\r\rcurrency: Currency! \r\r\rbinding: Boolean! \r\r\rnet: Float! \r\r\rgross: Float \r\r\rexchange: Exchange! \r\r\rrules: [Rule!]! \r\r}\r\r\rFields channel(String):\rchannel of markup application.\r\rcurrency(Currency!):\rCurrency code indicating which currency should be paid. This information is mandatory.\r\rbinding(Boolean!):\rIt indicates if the price indicated in the gross must be respected. That is, the customer can not sell the room / option at a price lower than that established by the supplier. This information is mandatory.\r\rnet(Float!):\rIndicates the net price that the customer must pay to the supplier plus the markup. This information is mandatory.\r\rgross(Float):\rIndicates the retail price that the supplier sells to the customer plus the markup.\r\rexchange(Exchange!):\rInforms about the currency of origin, and the rate applied over result. This information is mandatory.\r\rrules([Rule!]!):\rBreakdown of the applied rules for a markup\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/markupruletype/",
	"title": "MarkupRuleType",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition \renum\rMarkupRuleType{\r\r\rPERCENT,\r\r\r\rIMPORT,\r\r\r} \r Require by Rule: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/media/",
	"title": "Media",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Media {\r\rcode: ID! \r\r\rmediaData: MediaData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rmediaData(MediaData):\r\r\rerror([Error!]):\rErrors that will lead the service to abort\r\rcreatedAt(DateTime!):\rCreate date\r\rupdatedAt(DateTime!):\rUpdate date\r\r\nRequire by MediaEdge: \rHotelList Edge definition\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/mediaconnection/",
	"title": "MediaConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type MediaConnection {\r\redges: [MediaEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([MediaEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequire by HotelData: \rHotel data\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/mediadata/",
	"title": "MediaData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type MediaData {\r\rtype: ApplicationArea! \r\r\rurl: URI! \r\r}\r\r\rFields type(ApplicationArea!):\r\r\rurl(URI!):\r\r\r\nRequire by Media: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/mediaedge/",
	"title": "MediaEdge",
	"tags": [],
	"description": "",
	"content": " HotelList Edge definition\nGraphQL Schema definition type MediaEdge {\r\rcursor: String! \r\r\rnode: Media \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Media):\r\r\r\nRequire by MediaConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/member/",
	"title": "Member",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Member {\r\rcode: ID! \r\r\rmemberData: MemberData \r\r\rerror: [Error!] \r\r\risActive: Boolean! \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rmemberData(MemberData):\r\r\rerror([Error!]):\r\r\risActive(Boolean!):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequire by OrganizationData: \r\r\rGroupCommonData: \r\r\rGroupData: \r\r\rMemberEdge: \r\r\rAdminMutation: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/memberconnection/",
	"title": "MemberConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type MemberConnection {\r\redges: [MemberEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([MemberEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequire by AdminQuery: \r\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rGroupData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/memberdata/",
	"title": "MemberData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type MemberData {\r\rid: ID! \r\r\rcode: ID! \r\r\rroles: String \r\r\rmemberType: String \r\r\rgroups(\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\rcodes: [ID!],\r\r\r\r\r): GroupConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rroles(String):\r\r\rmemberType(String):\r\r\rgroups(GroupConnection):\r\r\r\nRequire by Member: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/memberedge/",
	"title": "MemberEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type MemberEdge {\r\rcursor: String! \r\r\rnode: Member \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Member):\r\r\r\nRequire by MemberConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/membertype/",
	"title": "MemberType",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition \renum\rMemberType{\r\r\rUSER,\r\r\r\rSERVICE_ACCOUNT,\r\r\r} \r Require by CreateMemberInput: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/method/",
	"title": "Method",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition \renum\rMethod{\r\r\rADD,\r\r\r\rDEL,\r\r\r} \r Require by UpdateMemberInput: \r\r\rUpdateGroupInput: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/schema/mutation/",
	"title": "Mutation",
	"tags": [],
	"description": "",
	"content": " Mutations are operations that change or update data in the server.\nGraphQL Schema definition type Mutation {\r\rhotelX: HotelXMutation \r\r\radmin: AdminMutation \r\r\rhotelBook(\rinput: HotelBookInput!,\rsettings: HotelSettingsInput,\r): HotelBookPayload \r\r\rhotelCancel(\rinput: HotelCancelInput!,\rsettings: HotelSettingsInput,\r): HotelCancelPayload \r\r\rloadFile(\rinput: String!,\r): String! \r\r\rcreateDefaultSettings(\rinput: DefaultSettingsInput!,\r): DefaultSettings \r\r\rupdateDefaultSettings(\rinput: DefaultSettingsInput!,\r): DefaultSettings \r\r\rdeleteDefaultSettings(\rinput: String!,\r): Boolean! \r\r}\r\r\rFields hotelX(HotelXMutation):\r\r\radmin(AdminMutation):\r\r\rhotelBook(HotelBookPayload):\rCreates a new hotel booking consisting of an option of 1 or more rooms.\r\rhotelCancel(HotelCancelPayload):\rCancels an existing hotel booking consisting of an option of 1 or more rooms.\r\rloadFile(String!):\rLoad mapping files for a group.\r\rcreateDefaultSettings(DefaultSettings):\rCreates a defaultSettings for a given group\r\rupdateDefaultSettings(DefaultSettings):\rUpdates a defaultSettings for a given group\r\rdeleteDefaultSettings(Boolean!):\rDeletes a defaultSettings for a given group\r\r\n"
},
{
	"uri": "/travelgatex/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface Node {\r\rcode: ID! \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\rID code\r\rerror([Error!]):\rErrors that will lead the service to abort\r\rcreatedAt(DateTime!):\rCreate date\r\rupdatedAt(DateTime!):\rUpdate date\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/occupancy/",
	"title": "Occupancy",
	"tags": [],
	"description": "",
	"content": " Information about occupancy.\nGraphQL Schema definition type Occupancy {\r\rid: Int! \r\r\rpaxes: [Pax!]! \r\r}\r\r\rFields id(Int!):\rUnique ID room in this option.\r\rpaxes([Pax!]!):\rList of pax of this occupancy.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Organization {\r\rcode: ID! \r\r\rorganizationData: OrganizationData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rorganizationData(OrganizationData):\r\r\rerror([Error!]):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequire by OrganizationEdge: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/organizationconnection/",
	"title": "OrganizationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type OrganizationConnection {\r\redges: [OrganizationEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([OrganizationEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequire by AdminQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/organizationdata/",
	"title": "OrganizationData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type OrganizationData {\r\rid: ID! \r\r\rcode: ID! \r\r\rtype: GroupType! \r\r\rinfo: String \r\r\rowner: Member \r\r\risEditable: Boolean! \r\r\rmembers(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): MemberConnection \r\r\rapis(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): APIConnection \r\r\rproducts(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): ProductConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rtype(GroupType!):\r\r\rinfo(String):\r\r\rowner(Member):\r\r\risEditable(Boolean!):\r\r\rmembers(MemberConnection):\r\r\rapis(APIConnection):\r\r\rproducts(ProductConnection):\r\r\r\nRequire by Organization: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/organizationedge/",
	"title": "OrganizationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type OrganizationEdge {\r\rcursor: String! \r\r\rnode: Organization \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Organization):\r\r\r\nRequire by OrganizationConnection: \r\r\r\n"
},
{
	"uri": "/admin/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Admin Information",
	"content": "This page shows you how to perform a basic hotel booking using GraphQL Playground.\n"
},
{
	"uri": "/flightx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "FlightX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/getting-started/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Learn the basics",
	"content": " With GraphQL API you\u0026rsquo;ll have access to all of our products and services through a single endpoint.\nHow it works                                                                                                                                                                                        \nOur Products Choose between our different products and start building your app.\n HotelX: Hotel search \u0026amp; booking API. ConnectX Flights: NDC compliant flight search \u0026amp; booking API. Stats: All the requests sent and received, their response times and status codes. Insights API: Become a true data-first decision maker. All the requests, all the searches, everything you\u0026rsquo;ve made with us will be available in Insight. Mappea: A collaborative Hotel Mapping. Use this API to map your providers or to make that everything you have mapped is accurate.  Join the TravelgateX partner program Start building your travel API by joining the TravelgateX partner program. The design of a registration form for developers is already in process but in the meantime you\u0026rsquo;re able to sign up through us directly to become a partner.\nHave a look at the documentation All the documentation is generated from GraphQL schema. Use the multiple columns navigation of the Playground to see and understand what information will be returned by each query.\n  Be part of the community Join our free community forum using your TravelgateX username and password. Our community is being run by Discourse to simplify and give the best experience to our members.\nAlthough the API has been designed to be very intuitive and easy to read, we are aware that some concepts can be confusing and the process of creating an API overwhelming. That\u0026rsquo;s why we\u0026rsquo;re here to help! You have access to a complete API documentation guide available inside the Playground, a large community with questions being answered by experienced members to help each other and a support team ready to solve any doubts that you might have during the process.\nCan\u0026rsquo;t find your answer? Contact our service desk. Got any technical questions or need support from our team? We’re here to help. Get in touch through Jira Service Desk using the username and password that has been sent to you together with the welcome pack. Let us know if you haven\u0026rsquo;t received it or can\u0026rsquo;t find it so we can send it to your email address again.\n"
},
{
	"uri": "/hotelx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "HotelX Information",
	"content": " HotelX is the ultimate connectivity solution, it not only connects you to multiple Sellers, but also adds business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\n Each and every layer discribed in the this figure is explained as follows:\nBusiness Logic We\u0026rsquo;ve added a new layer of business logic in front of the pure transformation API, very fast and totally scalable. It\u0026rsquo;s very flexible, everything can be overridden at the request level, or be left as is. The API is completely written in Go and Redis for performance and scalability. There\u0026rsquo;s also the possibility of writing plugins (in Go) in order to add any logic or add an extra functionality. The main funcionalities of the business logic layer includes, but not limited to:\n Configuration and access management Hotel, Room and Board Mappings Sort \u0026amp; Filter results Add pricing/markups Currency Exchange Plugins Execution  Plugins HotelX introduces a new concept to the industry: Plugins. In a nutshell, a plugin is a piece of code that is executed inside our application. There are a few points in the request lifetime where anyone can develop a plugin. It receives the request or response as an input and outputs the changed request or response. Plugins are a core package in the Go Programming language and more info about it can be found here.\nFor more information and how to write and build plugins please go to: Hotel.\nTransformation The transformation layer takes care of the actual trasformation into the Seller\u0026rsquo;s specific format and back. It generates requests to the supplier in an optimal way, we call it Optimal Connector. The Optimal connector is the result of years of interacting with the Sellers and learning from them and from experience how to send requests to them. Each different supplier has a different logic, and is more efficient in one way. We use this now how to send exactly the request which the supplier will handle more effectively, being that a per hotel list, or destination or anythign that over the time we0ve learned from their responses. The transformation layer keeps each and every Seller integration in an optimal level. If a new version is released, we will update our integration. Our team is constantly monitoring the traffic, both automatically and manually in order to make sure the connectivity just works.\n[Optional] Cache Layer Our cache layer, called Speed does exactly what the name says, it caches results so that we don\u0026rsquo;t knock out the Sellers. From a high level perspective it is just a cache. Our secret sauce is how we expire the cache. We use advanced Machine Learning models to predict how long each cached item will be valid from taking into account a large number of variables set in the request. The cache is hosted in Google\u0026rsquo;s BigTable, a \u0026ldquo;Massively Scalable NoSQL\u0026rdquo; database built with performance and scalability in mind.\nSellers Each and every Seller works in a different way. Most are old, legacy SOAP APIs, very few are RESTful APIs and none of them is GraphQL. We have developed them all, and suffered learned from all of them.\nWe connect seemlessly to more than 600 Sellers.\n"
},
{
	"uri": "/hotelx/plugins/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Plugins workflow execution",
	"content": " Introduction Plugins are custom code, executed in HotelX servers, that add or modify specific features. Partner can develop custom plugins, but in most cases, HotelX offers enough basic plugins to use.\nFlows HotelX query or mutation determine what flow is executed. Plugins can be executed in different flows:\n search quote hotelBook hotelCancel  Steps Step is the minium container where plugins are executed sequentially.\n   Step When is executed     Request After Buyer requests message to HotelX.   Request Access Before send request to Supplier using Access and after Accesses has been calculated.   Response Option After Supplier responds message. For every option returned.   Response Access After all Access options has been responded.   Response Before HotelX responds message to to Buyer.    Plugin Types Plugin types supported by HotelX:\n Pre Step: First execution on every step. Hotel Map: Hotel mapping codes. Board Map: Board mapping codes. Room Map: Room mapping codes. Currency Conversion: Currency rate conversion. Markup: Markups to supplier price. Aggregation: Aggregate multiple supplier options. Post Step: Last execution on every step.  Plugin Context Execution Once message enters on HotelX it flows over different flows and steps. That\u0026rsquo;s why plugins are executed in different contexts.\nContext allows:\n Read objects involved in current query and/or mutations. Read objects available in all HotelX operations.  With context information developers can personalize plugin features, more information about plugin development can be found here.\nPlugin Step Execution HotelX determine the order and plugin types executed for each step.\n    search quote hotelBook hotelCancel     Request Pre Step\nPost Step Pre Step\nPost Step Pre Step\nPost Step Pre Step Post Step   Request Access Pre Step\nHotel Map\nPost Step Pre Step Post Step Pre Step Post Step Pre Step Post Step   Response Option Pre Step\nHotel Map\nBoard Map\nRoom Map\nCurrency Conversion\nMarkup\nAggregation\nPost Step      Response Access Pre Step\nPost Step Pre Step\nHotel Map\nBoard Map\nRoom Map\nCurrency Conversion\nMarkup\nPost Step Pre Step\nHotel Map\nBoard Map\nRoom Map\nCurrency Conversion\nPost Step Pre Step\nHotel Map\nBoard Map\nRoom Map\nCurrency Conversion\nPost Step   Response Pre Step\nAggregation\nPost Step Pre Step Post Step Pre Step Post Step Pre Step Post Step    "
},
{
	"uri": "/insightsx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "FlightX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/mappeax/overview/",
	"title": "Overview",
	"tags": [],
	"description": "FlightX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/statsx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "StatsX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/travelgatex/overview/",
	"title": "Overview",
	"tags": [],
	"description": "TravelgateX Platform Information",
	"content": " This page provides an overview of travelgateX platform.\nGraphQL Gateway ConnectX is the travel API completely based in GraphQL and unlike many old legacy XML Soap APIs, GraphQL enables each client to return exactly what they want. If you wish to read more about it, visit GraphQL guide.\nThe architecture doesn\u0026rsquo;t differ from many modern APIs. There’s an API Gateway, which takes care of basic procedures such as authentication, authorization and it also acts like a shield to protect us from DoS attacks and also handles throttling. On the other hand, Analytics is also an important part in the gateway.\nOur Gateway is the only endpoint to access all of our APIs. It is written in NodeJS, making it fast, stable, secure, fault tolerant and load balanced between many datacenters from four different cloud providers: Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime.\nUsing the API The two types of allowed operations in TravelgateX GraphQL API are:\n Queries Mutations  If you wish to learn how to use a GraphQL API feel free to visit our guide.\nGraphQL Endpoint One of the benefits of using GraphQL is that there\u0026rsquo;s only one single endpoint. You can use this endpoint for all operations you want to perform:\nhttps://api.travelgatex.com\rCommunicating with the Server To communicate with the GraphQL server, you\u0026rsquo;ll need an access token with the right scopes. You are able to create a token by following the steps mentioned in Security Overview.\nMaking Requests Because GraphQL operations consist of multiple operations and schemas, we recommend using the Explorer to make GraphQL calls. There are some alternatives to use GraphQL builtin explorer like GraphQL Playground. You can also use curl or any other HTTP-speaking library.\nAll LIVE traffic MUST enable GZIP compression in the HTTP header\rAccept-Encoding: gzip  To query GraphQL using curl , make a POST request with a JSON payload. The payload must contain a string called query:\ncurl -X\\ POST\\ -H \u0026quot;Content-Type: application/json\u0026quot; \\ -H \u0026quot;Authorization: Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot; \\ --data '{\u0026quot;query\u0026quot;:\u0026quot;{searchStatusService{code description}}\u0026quot;}' \\ --compressed \\ https://api.travelgatex.com  Viewing the Graph Graphql-voyager displays our GraphQL API in an interactive graph to help you understand its structure.\n  Quick navigation on graph Left panel which provides more detailed information about every type \u0026ldquo;Skip Relay\u0026rdquo; option that simplifies graph by removing Relay wrapper classes Ability to choose any type to be a root of the graph     Examples We share GraphQL Playgrounds with common scenarios using products. Playgrounds are shared in product reference sections, for example you can use ConnectX Hotel Playground\nKeep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\nYou can easily share your Queries with others by generating a link using the share button available on the GraphQL Bin. The GraphQL Bin works as a Pastebin for your GraphQL queries including the context (endpoint, HTTP headers, open tabs etc).\nConventions TravelgateX follows some conventions about schema definition:\n Relay schema requirements Definition of custom scalar types Token Based Authentication  Relay Implementation TravelgateX uses Relay schema requirements for its own Resources. Other resources, such as Seller search response, are not modeled with Relay practices.\nRelay helps TravelgateX API in order to standarize:\n Standards for querying paginated collections (\u0026ldquo;Connections\u0026rdquo; and \u0026ldquo;Edges\u0026rdquo;) Identifying objects directly from the root of a query (avoiding long nested queries) Provide mutation input data  "
},
{
	"uri": "/travelgatex/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type PageInfo {\r\rhasNextPage: Boolean! \r\r\rhasPreviousPage: Boolean! \r\r\rstartCursor: String! \r\r\rendCursor: String! \r\r}\r\r\rFields hasNextPage(Boolean!):\r\r\rhasPreviousPage(Boolean!):\r\r\rstartCursor(String!):\r\r\rendCursor(String!):\r\r\r\nRequire by HotelConnection: \rHotelList definition\r\rMediaConnection: \r\r\rAmenityConnection: \r\r\rOrganizationConnection: \r\r\rGroupConnection: \r\r\rMemberConnection: \r\r\rAPIConnection: \r\r\rResourceConnection: \r\r\rRoleConnection: \r\r\rProductConnection: \r\r\rAccessConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/parameter/",
	"title": "Parameter",
	"tags": [],
	"description": "",
	"content": " Parameters for additional information for the supplier\u0026rsquo;s configuration.\nGraphQL Schema definition type Parameter {\r\rkey: String! \r\r\rvalue: String! \r\r}\r\r\rFields key(String!):\rContains the keyword/Id to identify a parameter. This information is mandatory.\r\rvalue(String!):\rContains the parameter values. This information is mandatory.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/parameterinput/",
	"title": "ParameterInput",
	"tags": [],
	"description": "",
	"content": " Parameters for additional information for the supplier\u0026rsquo;s configuration.\nGraphQL Schema definition type ParameterInput {\r\rkey: String! \r\r\rvalue: String! \r\r}\r\r\rFields key(String!):\rContains the keyword/Id to identify a parameter.\r\rvalue(String!):\rContains the parameter values.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/pax/",
	"title": "Pax",
	"tags": [],
	"description": "",
	"content": " Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.\nGraphQL Schema definition type Pax {\r\rage: Int! \r\r}\r\r\rFields age(Int!):\rSpecifies the age pax.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/paxinput/",
	"title": "PaxInput",
	"tags": [],
	"description": "",
	"content": " Pax object that contains the pax age.\nGraphQL Schema definition type PaxInput {\r\rage: Int! \r\r}\r\r\rFields age(Int!):\rPax age.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/paymentcardinput/",
	"title": "PaymentCardInput",
	"tags": [],
	"description": "",
	"content": " Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information\nGraphQL Schema definition type PaymentCardInput {\r\rcardType: String! \r\r\rholder: HolderInput! \r\r\rnumber: String! \r\r\rCVC: String! \r\r\rexpire: ExpireDateInput! \r\r}\r\r\rFields cardType(String!):\rIndicates the card type.\r\rholder(HolderInput!):\rContains owner\u0026#39;s name\r\rnumber(String!):\rContains credit card number\r\rCVC(String!):\rContains credit card CVC\r\rexpire(ExpireDateInput!):\rContains credit card expiration date\r\r\nRequire by HotelBookInput: \rCriteria of book.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/paymenttype/",
	"title": "PaymentType",
	"tags": [],
	"description": "",
	"content": " Options payment type\nGraphQL Schema definition \renum\rPaymentType{\r\r\rMERCHANT,\r\r\r\rDIRECT,\r\r\r\rCARD_BOOKING,\r\r\r\rCARD_CHECK_IN,\r\r\r} \r Require by HotelOptionSearch: \rAn option includes hotel information, meal plan, total price, conditions and room description.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/pluginstepinput/",
	"title": "PluginStepInput",
	"tags": [],
	"description": "",
	"content": " Plugin to execute.\nGraphQL Schema definition type PluginStepInput {\r\rstep: PluginStepType! \r\r\rpluginsType: [PluginsInput!] \r\r}\r\r\rFields step(PluginStepType!):\rIndicates where the plugin will be executed.\r\rpluginsType([PluginsInput!]):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/pluginsteptype/",
	"title": "PluginStepType",
	"tags": [],
	"description": "",
	"content": " Plugin Step Type\nGraphQL Schema definition \renum\rPluginStepType{\r\r\rREQUEST,\r\r\r\rREQUEST_ACCESS,\r\r\r\rRESPONSE_OPTION,\r\r\r\rRESPONSE_ACCESS,\r\r\r\rRESPONSE,\r\r\r} \r Require by PluginStepInput: \rPlugin to execute.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/pluginsinput/",
	"title": "PluginsInput",
	"tags": [],
	"description": "",
	"content": " Plugin to execute.\nGraphQL Schema definition type PluginsInput {\r\rtype: PluginType! \r\r\rname: String! \r\r\rparameters: [ParameterInput!] \r\r}\r\r\rFields type(PluginType!):\rtype of the plugins to execute\r\rname(String!):\rname of plugin to execute\r\rparameters([ParameterInput!]):\rPlugin\u0026#39;s parameters\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/price/",
	"title": "Price",
	"tags": [],
	"description": "",
	"content": " Price indicates the value of the room/option. Supplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.\nGraphQL Schema definition type Price {\r\rcurrency: Currency! \r\r\rbinding: Boolean! \r\r\rnet: Float! \r\r\rgross: Float \r\r\rexchange: Exchange! \r\r\rmarkups: [Markup!] \r\r}\r\r\rFields currency(Currency!):\rCurrency code indicating which currency should be paid. This information is mandatory.\r\rbinding(Boolean!):\rIt indicates if the price indicated in the gross must be respected. That is, the customer can not sell the room / option at a price lower than that established by the supplier. This information is mandatory.\r\rnet(Float!):\rIndicates the net price that the customer must pay to the supplier. This information is mandatory.\r\rgross(Float):\rIndicates the retail price that the supplier sells to the customer.\r\rexchange(Exchange!):\rInforms about the currency of origin, and the rate applied over result returned by the supplier. This information is mandatory.\r\rmarkups([Markup!]):\rInforms markup applied over supplier price.\r\r\nRequire by HotelOptionSearch: \rAn option includes hotel information, meal plan, total price, conditions and room description.\r\rRoomPrice: \rSpecifies the room price.\r\rPriceBreakdown: \rInformation about daily price.\r\rSupplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\rSurcharge: \rSurcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.\r\rHotelOptionQuote: \rContains information about quote.\r\rHotelBookingDetail: \rContains information about booking.\r\rBookingRoom: \r\r\rHotelCancelDetail: \rContains information about cancel\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/pricebreakdown/",
	"title": "PriceBreakdown",
	"tags": [],
	"description": "",
	"content": " Information about daily price.\nGraphQL Schema definition type PriceBreakdown {\r\reffectiveDate: Date! \r\r\rexpireDate: Date! \r\r\rprice: Price! \r\r}\r\r\rFields effectiveDate(Date!):\rStart date in which the price becomes effective.\r\rexpireDate(Date!):\rExpire date of price.\r\rprice(Price!):\rSpecifies the daily price.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/pricetype/",
	"title": "PriceType",
	"tags": [],
	"description": "",
	"content": " Price Type\nGraphQL Schema definition \renum\rPriceType{\r\r\rGROSS,\r\r\r\rNET,\r\r\r\rAMOUNT,\r\r\r} \r "
},
{
	"uri": "/travelgatex/reference/interfaces/priceable/",
	"title": "Priceable",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface Priceable {\r\rcurrency: Currency! \r\r\rbinding: Boolean! \r\r\rnet: Float! \r\r\rgross: Float \r\r\rexchange: Exchange! \r\r}\r\r\rFields currency(Currency!):\rSpecifies the currency.\r\rbinding(Boolean!):\rIs binding.\r\rnet(Float!):\rSpecifies the import net.\r\rgross(Float):\rSpecifies the import gross.\r\rexchange(Exchange!):\rSpecifies the exchange.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/product/",
	"title": "Product",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Product {\r\rcode: ID! \r\r\rproductData: ProductData! \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rproductData(ProductData!):\r\r\rerror([Error!]):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequire by ProductEdge: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/productconnection/",
	"title": "ProductConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type ProductConnection {\r\redges: [ProductEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([ProductEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequire by AdminQuery: \r\r\rOrganizationData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/productdata/",
	"title": "ProductData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type ProductData {\r\rid: ID! \r\r\rcode: ID! \r\r\rapis(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): APIConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rapis(APIConnection):\r\r\r\nRequire by Product: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/productedge/",
	"title": "ProductEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type ProductEdge {\r\rcursor: String! \r\r\rnode: Product \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Product):\r\r\r\nRequire by ProductConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/promotion/",
	"title": "Promotion",
	"tags": [],
	"description": "",
	"content": " Information about room promotions(offers).\nGraphQL Schema definition type Promotion {\r\rcode: String! \r\r\rname: String \r\r\reffectiveDate: Date \r\r\rexpireDate: Date \r\r}\r\r\rFields code(String!):\rSpecifies the promotion code.\r\rname(String):\rSpecifies the promotion name.\r\reffectiveDate(Date):\rPromotion effective date.\r\rexpireDate(Date):\rPromotion expire date.\r\r\n"
},
{
	"uri": "/travelgatex/reference/schema/query/",
	"title": "Query",
	"tags": [],
	"description": "",
	"content": " A query is a request for information from a database.\nGraphQL Schema definition type Query {\r\rhotelX: HotelXQuery \r\r\radmin: AdminQuery \r\r\rsearch: Search! \r\r\rquote: Quote! \r\r\rbooking: Booking \r\r\rdefaultSettings(\rgroupCode: String!,\r): DefaultSettings \r\r\rmapping(\rgroupCode: String!,\r): Mapping! \r\r}\r\r\rFields hotelX(HotelXQuery):\r\r\radmin(AdminQuery):\r\r\rsearch(Search!):\rAvailable options for a given date and itinerary.\r\rquote(Quote!):\rReturns the total price and cancellation policies of the Option selected in the previous step (Search).\r\rbooking(Booking):\rReturns detailed information about books.\r\rdefaultSettings(DefaultSettings):\rReads defaultSettings of the given group\r\rmapping(Mapping!):\rReturns the mapping for a group, is necessary specify the group.\r\r\n"
},
{
	"uri": "/getting-started/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "Try the API now",
	"content": " Try it now and see how easy it is to use! If you\u0026rsquo;re ready to start searching for a hotel, getting a quote and booking it right away, try out the TravelgateX API by following the steps below.\nJoin the TravelgateX partner program In order to start building your own API, you\u0026rsquo;ll need to join the TravelgateX partner program. The design of a registration form for developers is already in process but in the meantime you\u0026rsquo;re able to sign up through us directly to become a partner.\nProduct Quick Start Choose the desired product from the list with which you\u0026rsquo;d like to start building your app.\n ConnectX Hotel: Hotel search \u0026amp; booking API. ConnectX Flights: NDC compliant flight search \u0026amp; booking API. Stats: all the requests sent and received, their response times and status codes. Insights: become a true data-first decision maker by leveraging our rich Insights API. All the requests, all the searches, everything you\u0026rsquo;ve made with us will be available through Insights. Mappea: use this Hotel Mapping API to map your sellers or to check if everything you\u0026rsquo;ve mapped is accurate.  Have a look at the documentation All the documentation is generated from GraphQL schema. Use the multiple columns navigation of the Playground to see and understand what information will be returned by each query.\n  Be part of the community Join our free community forum using your TravelgateX username and password. Our community is being run by Discourse to simplify and give the best experience to our members.\nAlthough the API has been designed to be very intuitive and easy to read, we are aware that some concepts can be confusing and the process of creating an API overwhelming. That\u0026rsquo;s why we\u0026rsquo;re here to help! You have access to a complete API documentation guide available inside the Playground, a large community with questions being answered by experienced members to help each other and a support team ready to solve any doubts that you might have during the process.\nCan\u0026rsquo;t find your answer? Got any technical questions or need support from our team? We’re here to help. Get in touch through Jira Service Desk using the username and password that has been sent to you together with the welcome pack. Let us know if you haven\u0026rsquo;t received it or can\u0026rsquo;t find it so we can send it to your email address again.\n"
},
{
	"uri": "/hotelx/resources/quotas-limits/",
	"title": "Quotas &amp; Limits",
	"tags": [],
	"description": "",
	"content": "ConnectX Hotel limits the maximum rate of requests adn graph deep. Specific policies vary depending on resource availability, user profile, service usage history, and other factors, and are subject to change without notice.\n"
},
{
	"uri": "/travelgatex/reference/objects/quote/",
	"title": "Quote",
	"tags": [],
	"description": "",
	"content": " Returns the total price and cancellation policies of the Option selected in the previous step (Search).\nGraphQL Schema definition type Quote {\r\rhotel(\rcriteria: HotelCriteriaQuoteInput!,\rsettings: HotelSettingsInput,\r): HotelQuote \r\r}\r\r\rFields hotel(HotelQuote):\rReturns the total price and cancellation policies of the Option selected in the previous step (Search).\r\r\nRequire by Query: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/rateplan/",
	"title": "RatePlan",
	"tags": [],
	"description": "",
	"content": " Information about the rate of the option returned.\nGraphQL Schema definition type RatePlan {\r\rcode: String! \r\r\rname: String \r\r\reffectiveDate: Date \r\r\rexpireDate: Date \r\r}\r\r\rFields code(String!):\rSpecifies the rate code.\r\rname(String):\rSpecifies the rate name.\r\reffectiveDate(Date):\rStart date in which the rate becomes effective.\r\rexpireDate(Date):\rExpire date of the rate.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/raterulesfilterinput/",
	"title": "RateRulesFilterInput",
	"tags": [],
	"description": "",
	"content": " If requested, only options with the specified rateRules will be returned\nGraphQL Schema definition type RateRulesFilterInput {\r\rincludes: [RateRulesType!] \r\r\rexcludes: [RateRulesType!] \r\r}\r\r\rFields includes([RateRulesType!]):\rif includes not nil: only options without rate rules and options with rate rules found in includes will be returned\r\rexcludes([RateRulesType!]):\rif excludes not nil: only options without rate rules and options with rate rules that haven\u0026#39;t been sent in excludes will be returned\r\r\nRequire by FilterInput: \rFilter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026#39;t specified anything. If input both, you will receive a validation error that indicates this error.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " Rate Rules\nGraphQL Schema definition \renum\rRateRulesType{\r\r\rPACKAGE,\r\r\r\rOLDER55,\r\r\r\rOLDER60,\r\r\r\rOLDER65,\r\r\r\rCANARY_RESIDENT,\r\r\r\rBALEARIC_RESIDENT,\r\r\r\rLARGE_FAMILY,\r\r\r\rHONEYMOON,\r\r\r\rPUBLIC_SERVANT,\r\r\r\rUNEMPLOYED,\r\r\r} \r "
},
{
	"uri": "/travelgatex/reference/objects/reference/",
	"title": "Reference",
	"tags": [],
	"description": "",
	"content": " Contains reference codes.\nGraphQL Schema definition type Reference {\r\rclient: String \r\r\rsupplier: String \r\r}\r\r\rFields client(String):\rClient reference booking\r\rsupplier(String):\rSupplier reference booking\r\r\nRequire by HotelBookingDetail: \rContains information about booking.\r\rHotelCancelDetail: \rContains information about cancel\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/requeststats/",
	"title": "RequestStats",
	"tags": [],
	"description": "",
	"content": " Contains internal information.\nGraphQL Schema definition type RequestStats {\r\rtotal: Stat! \r\r\rvalidation: Stat! \r\r\rprocess: Stat! \r\r\rAccesses: [StatAccess!]! \r\r\rExternal: String! \r\r}\r\r\rFields total(Stat!):\r\r\rvalidation(Stat!):\r\r\rprocess(Stat!):\r\r\rAccesses([StatAccess!]!):\r\r\rExternal(String!):\r\r\r\nRequire by HotelSearch: \rResults of Avail Hotel. Contains all the available options for a given date and itinerary.\r\rResponse: \r\r\rHotelQuote: \r\r\rHotelBooking: \r\r\rHotelBookPayload: \r\r\rHotelCancelPayload: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/resort/",
	"title": "Resort",
	"tags": [],
	"description": "",
	"content": " Contains information about the Resort.\nGraphQL Schema definition type Resort {\r\rcode: String! \r\r\rname: String \r\r\rdescription: String \r\r}\r\r\rFields code(String!):\rSpecifies the resort code.\r\rname(String):\rSpecifies the resort name.\r\rdescription(String):\rSpecifies the resort description.\r\r\nRequire by Supplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Resource {\r\rcode: ID! \r\r\rerror: [Error!] \r\r\rresourceData: ResourceData \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rerror([Error!]):\r\r\rresourceData(ResourceData):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequire by ResourceEdge: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/resourceconnection/",
	"title": "ResourceConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type ResourceConnection {\r\redges: [ResourceEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([ResourceEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequire by AdminQuery: \r\r\rAPIData: \r\r\rRoleData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/resourcedata/",
	"title": "ResourceData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type ResourceData {\r\rid: ID! \r\r\rcode: ID! \r\r\rapis(\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\rcodes: [ID!],\r\r\r\r\r): APIConnection \r\r\rroles(\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\rcodes: [ID!],\r\r\r\r\r): RoleConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rapis(APIConnection):\r\r\rroles(RoleConnection):\r\r\r\nRequire by Resource: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/resourceedge/",
	"title": "ResourceEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type ResourceEdge {\r\rcursor: String! \r\r\rnode: Resource \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Resource):\r\r\r\nRequire by ResourceConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/interfaces/response/",
	"title": "Response",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface Response {\r\rstats(\rtoken: String!,\r): RequestStats \r\r\rauditData: AuditData \r\r\rerrors: [Error!] \r\r\rwarnings: [Warning!] \r\r}\r\r\rFields stats(RequestStats):\rApplication stats in string format\r\rauditData(AuditData):\rData sent \u0026amp; received in the supplierâ€™s original format.\r\rerrors([Error!]):\rErrors that lead the service to stop\r\rwarnings([Warning!]):\rPotentially harmful situations or errors that do not stop the service\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/role/",
	"title": "Role",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Role {\r\rcode: ID! \r\r\rerror: [Error!] \r\r\rroleData: RoleData \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rerror([Error!]):\r\r\rroleData(RoleData):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequire by RoleEdge: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roleconnection/",
	"title": "RoleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type RoleConnection {\r\redges: [RoleEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([RoleEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequire by AdminQuery: \r\r\rResourceData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roledata/",
	"title": "RoleData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type RoleData {\r\rid: ID! \r\r\rcode: ID! \r\r\rlabel: String! \r\r\risCreate: Boolean! \r\r\risRead: Boolean! \r\r\risUpdate: Boolean! \r\r\risDelete: Boolean! \r\r\risEnable: Boolean! \r\r\risExecutable: Boolean! \r\r\risSpecial: Boolean! \r\r\rspecial: String \r\r\rresources(\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\rcodes: [ID!],\r\r\r\r\r): ResourceConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rlabel(String!):\r\r\risCreate(Boolean!):\r\r\risRead(Boolean!):\r\r\risUpdate(Boolean!):\r\r\risDelete(Boolean!):\r\r\risEnable(Boolean!):\r\r\risExecutable(Boolean!):\r\r\risSpecial(Boolean!):\r\r\rspecial(String):\r\r\rresources(ResourceConnection):\r\r\r\nRequire by Role: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roleedge/",
	"title": "RoleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type RoleEdge {\r\rcursor: String! \r\r\rnode: Role \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Role):\r\r\r\nRequire by RoleConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/room/",
	"title": "Room",
	"tags": [],
	"description": "",
	"content": " Contains the room information of the option returned.\nGraphQL Schema definition type Room {\r\roccupancyRefId: Int! \r\r\rcode: String! \r\r\rdescription: String \r\r\rrefundable: Boolean \r\r\runits: Int \r\r\rroomPrice: RoomPrice! \r\r\rbeds: [Bed!] \r\r\rratePlans: [RatePlan!] \r\r\rpromotions: [Promotion!] \r\r}\r\r\rFields occupancyRefId(Int!):\rID reference to the occupancy.\r\rcode(String!):\rIndicates the room code.\r\rdescription(String):\rDescription about the room.\r\rrefundable(Boolean):\rIdentifies if the room is refundable or not.\r\runits(Int):\rNumber of rooms available with the same type.\r\rroomPrice(RoomPrice!):\rSpecifies the room price.\r\rbeds([Bed!]):\rList of beds.\r\rratePlans([RatePlan!]):\rDaily break downs rate plan.\r\rpromotions([Promotion!]):\rDaily break downs promotions.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roomcriteria/",
	"title": "RoomCriteria",
	"tags": [],
	"description": "",
	"content": " Occupancy for a room. It contains a list of pax ages.\nGraphQL Schema definition type RoomCriteria {\r\rpaxes: [Pax!]! \r\r}\r\r\rFields paxes([Pax!]!):\rArray of pax ages. The number of items in the array will indicate the pax occupancy.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/roominput/",
	"title": "RoomInput",
	"tags": [],
	"description": "",
	"content": " Occupancy for a room. It contains a list of pax ages.\nGraphQL Schema definition type RoomInput {\r\rpaxes: [PaxInput!]! \r\r}\r\r\rFields paxes([PaxInput!]!):\rArray of pax ages. The number of items in the array will indicate the pax occupancy.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roomprice/",
	"title": "RoomPrice",
	"tags": [],
	"description": "",
	"content": " Specifies the room price.\nGraphQL Schema definition type RoomPrice {\r\rprice: Price! \r\r\rbreakdown: [PriceBreakdown!] \r\r}\r\r\rFields price(Price!):\rTotal price for all days.\r\rbreakdown([PriceBreakdown!]):\rDaily break downs price.\r\r\nRequire by Room: \rContains the room information of the option returned.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/rule/",
	"title": "Rule",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Rule {\r\rid: String! \r\r\rname: String \r\r\rtype: MarkupRuleType! \r\r\rvalue: Float! \r\r}\r\r\rFields id(String!):\rrule identifier\r\rname(String):\rrule name\r\rtype(MarkupRuleType!):\rtype of the value\r\rvalue(Float!):\rvalue applied by this rule\r\r\n"
},
{
	"uri": "/travelgatex/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/travelgatex/reference/objects/search/",
	"title": "Search",
	"tags": [],
	"description": "",
	"content": " Available options for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward.\nGraphQL Schema definition type Search {\r\rhotel(\r\r\r\rtoken: String,\r\r\r\r\rcriteria: HotelCriteriaSearchInput,\r\r\r\r\rsettings: HotelSettingsInput,\r\r\r\r\rfilter: FilterInput,\r\r\r\r\r): HotelSearch \r\r}\r\r\rFields hotel(HotelSearch):\rAvailable options of an hotel for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward. It only requires the criteria of search (destination, travel dates and the number of pax in each room). But you must preload the other fields in our system by complete the fields absents.\r\r\nRequire by Query: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/servicestatus/",
	"title": "ServiceStatus",
	"tags": [],
	"description": "",
	"content": " Indicates the status of the service\nGraphQL Schema definition type ServiceStatus {\r\rcode: String \r\r\rtype: String \r\r\rdescription: String \r\r}\r\r\rFields code(String):\rStatus code\r\rtype(String):\rStatus type\r\rdescription(String):\rStatus description\r\r\nRequire by HotelXQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/servicetype/",
	"title": "ServiceType",
	"tags": [],
	"description": "",
	"content": " Service Type\nGraphQL Schema definition \renum\rServiceType{\r\r\rSKI_PASS,\r\r\r} \r "
},
{
	"uri": "/travelgatex/reference/inputobjects/settingsbaseinput/",
	"title": "SettingsBaseInput",
	"tags": [],
	"description": "",
	"content": " Contains the time out and business rules of a supplier or an access.\nGraphQL Schema definition type SettingsBaseInput {\r\rtimeout: Int \r\r\rauditTransactions: Boolean \r\r\rbusinessRules: BusinessRulesInput \r\r}\r\r\rFields timeout(Int):\rMilliseconds before the connection is closed.\r\rauditTransactions(Boolean):\rSpecifies if transactions exchanged with the supplier have to be logged or not.\r\rbusinessRules(BusinessRulesInput):\rBusiness rules.\r\r\nRequire by SupplierInput: \rSupplier object. Contains its own settings, code and access.\r\rAccessInput: \rAccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/stat/",
	"title": "Stat",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Stat {\r\rstart: DateTime! \r\r\rend: DateTime! \r\r\rduration: Float \r\r}\r\r\rFields start(DateTime!):\rStart UTC\r\rend(DateTime!):\rEnd UTC\r\rduration(Float):\rDifference between start and end in miliseconds\r\r\nRequire by RequestStats: \rContains internal information.\r\rStatAccess: \r\r\rStatTransaction: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/stataccess/",
	"title": "StatAccess",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type StatAccess {\r\rname: String! \r\r\rtotal: Stat! \r\r\rstaticConfiguration: Stat \r\r\rtransactions: [StatTransaction!]! \r\r\rexternal: String! \r\r}\r\r\rFields name(String!):\r\r\rtotal(Stat!):\r\r\rstaticConfiguration(Stat):\r\r\rtransactions([StatTransaction!]!):\r\r\rexternal(String!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/stattransaction/",
	"title": "StatTransaction",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type StatTransaction {\r\rreference: String! \r\r\rtotal: Stat! \r\r\rbuildRequest: Stat! \r\r\rworkerCommunication: Stat! \r\r\rparseResponse: Stat! \r\r}\r\r\rFields reference(String!):\r\r\rtotal(Stat!):\r\r\rbuildRequest(Stat!):\r\r\rworkerCommunication(Stat!):\r\r\rparseResponse(Stat!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/statustype/",
	"title": "StatusType",
	"tags": [],
	"description": "",
	"content": " Options status\nGraphQL Schema definition \renum\rStatusType{\r\r\rOK,\r\r\r\rRQ,\r\r\r} \r Require by HotelOptionSearch: \rAn option includes hotel information, meal plan, total price, conditions and room description.\r\rHotelOptionQuote: \rContains information about quote.\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL Schema definition scalar String\r\r\rRequire by HotelEdge: \rHotelList Edge definition\r\rError: \rApplication errors\r\rAdviseMessage: \r\r\rHotelData: \rHotel data\r\rMediaEdge: \rHotelList Edge definition\r\rPageInfo: \r\r\rAmenityEdge: \rHotelList Edge definition\r\rInformation: \r\r\rLocation: \rLocation\r\rGeocode: \rGeocode type\r\rContact: \rContact type\r\rDestination: \rDestination type\r\rHotelCriteriaSearchInput: \rCriteria of search contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\r\rHotelSettingsInput: \rSettings that you can edit for this avail. Values are loaded by default in our Back Office.\r\rSupplierInput: \rSupplier object. Contains its own settings, code and access.\r\rConfigurationInput: \rThe information and credentials required to access the supplierâ€™s system.\r\rParameterInput: \rParameters for additional information for the supplier\u0026#39;s configuration.\r\rPluginsInput: \rPlugin to execute.\r\rHotelSearch: \rResults of Avail Hotel. Contains all the available options for a given date and itinerary.\r\rRequestStats: \rContains internal information.\r\rStatAccess: \r\r\rStatTransaction: \r\r\rTransactions: \rSupplier transaction\r\rWarning: \rApplication warnings\r\rCriteriaSearch: \rCriteria of search contains destination, travel dates and the number of pax in each room.\r\rHotelOptionSearch: \rAn option includes hotel information, meal plan, total price, conditions and room description.\r\rBookableOptionSearch: \r\r\rRoom: \rContains the room information of the option returned.\r\rMarkup: \rInforms markup applied over supplier price.\r\rRule: \r\r\rBed: \rContains information about a bed.\r\rRatePlan: \rInformation about the rate of the option returned.\r\rPromotion: \rInformation about room promotions(offers).\r\rSupplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\rResort: \rContains information about the Resort.\r\rSurcharge: \rSurcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.\r\rHotelCriteriaQuoteInput: \rThe quote criteria contains the option reference id, block and language.\r\rHotelOptionQuote: \rContains information about quote.\r\rHotelCriteriaBookingInput: \rCriteria of book contains basic information to find a book or books.\r\rCriteriaBookingReferencesInput: \rCriteria by references\r\rBookReferenceInput: \rReference object that contains the client reference and/or supplier reference.\r\rHotelBookingDetail: \rContains information about booking.\r\rReference: \rContains reference codes.\r\rHolder: \rHolder object that contains the pax name and surname.\r\rBookingHotel: \r\r\rBookingRoom: \r\r\rServiceStatus: \rIndicates the status of the service\r\rOrganizationEdge: \r\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rMemberData: \r\r\rGroupEdge: \r\r\rGroupData: \r\r\rMemberEdge: \r\r\rAPIEdge: \r\r\rResourceEdge: \r\r\rRoleEdge: \r\r\rRoleData: \r\r\rProductEdge: \r\r\rDefaultSettings: \r\r\rMappingContext: \rReturns the differents group contexts\r\rMappingEntity: \rMapping about client codes with the equivalence per supplier.\r\rMap: \rMap codes.\r\rMutation: \rMutations are operations that change or update data in the server.\r\rHotelBookInput: \rCriteria of book.\r\rPaymentCardInput: \rInput PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information\r\rHolderInput: \rHolder object that contains the pax name and surname.\r\rBookPaxInput: \rInput BookPax contains basic information abaout pax suach as name, surname and age.\r\rHotelCancelInput: \rCancellation Criteria.\r\rHotelCancelDetail: \rContains information about cancel\r\rCreateMemberInput: \r\r\rCreateGroupInput: \r\r\rUpdateMemberInput: \r\r\rUpdateGroupInput: \r\r\rDefaultSettingsInput: \r\r\rAccessData: \r\r\rSupplierGroup: \rgroup related to a supplier\r\rParameter: \rParameters for additional information for the supplier\u0026#39;s configuration.\r\rAccessEdge: \r\r\rGiataID: \rGiata System ID.\r\rConnectUser: \rdata related to a connect user and its groups\r\rConnectUserGroup: \rgroup related to a connect user\r\rAccessConfigurationInput: \rThe information required to access the supplier\u0026#39;s system.\r\rAccessConnectUserInput: \rConnect user input for data access management API\r\rConnectUserGroupInput: \rgroup related to a connect user\r\rAccessSupplierInput: \rSupplier input for data access management API\r\rSupplierGroupInput: \rgroup related to a supplier\r\rIdAccessConfigurationInput: \r\r\r "
},
{
	"uri": "/travelgatex/reference/objects/supplement/",
	"title": "Supplement",
	"tags": [],
	"description": "",
	"content": " Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.\nGraphQL Schema definition type Supplement {\r\rcode: String! \r\r\rname: String \r\r\rdescription: String \r\r\rsupplementType: SupplementType! \r\r\rchargeType: ChargeType! \r\r\rmandatory: Boolean! \r\r\rdurationType: DurationType \r\r\rquantity: Int \r\r\runit: UnitTimeType \r\r\reffectiveDate: Date \r\r\rexpireDate: Date \r\r\rresort: Resort \r\r\rprice: Price \r\r}\r\r\rFields code(String!):\rSpecifies the supplement code.\r\rname(String):\rSpecifies the supplement name.\r\rdescription(String):\rSpecifies the supplement description.\r\rsupplementType(SupplementType!):\rIndicates the supplement type. Possible types: Fee, Ski_pass, Lessons, Meals, Equipment, Ticket, Transfers, Gla, Activity or Null.\r\rchargeType(ChargeType!):\rIndicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand. Possible charge types: Include or Exclude. when include: this supplement is mandatory and included in the option\u0026#39;s price when exclude: this supplement is not included in the option\u0026#39;s price\r\rmandatory(Boolean!):\rIndicates if the supplement is mandatory or not. If mandatory, this supplement will be applied to this option if the chargeType is excluded the customer will have to pay it directly at the hotel\r\rdurationType(DurationType):\rSpecifies the duration type. Possible duration types: Range (specified dates) or Open. This field is mandatory for PDI.\r\rquantity(Int):\rIndicates the quantity of field in the element \u0026#34;unit\u0026#34;.\r\runit(UnitTimeType):\rIndicates the unit type. Possible unit types: Day or Hour.\r\reffectiveDate(Date):\rIndicates the effective date of the supplement.\r\rexpireDate(Date):\rIndicates the expire date of the supplement.\r\rresort(Resort):\rContains information about the resort\r\rprice(Price):\rIndicates the supplement price.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/supplementtype/",
	"title": "SupplementType",
	"tags": [],
	"description": "",
	"content": " Supplement Type\nGraphQL Schema definition \renum\rSupplementType{\r\r\rSKI_PASS,\r\r\r\rLESSONS,\r\r\r\rMEALS,\r\r\r\rEQUIPMENT,\r\r\r\rTICKET,\r\r\r\rTRANSFERS,\r\r\r\rGALA,\r\r\r\rACTIVITY,\r\r\r} \r Require by Supplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/supplier/",
	"title": "Supplier",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Supplier {\r\rcode: ID! \r\r\rsupplierData: SupplierData! \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rsupplierData(SupplierData!):\r\r\rerror([Error!]):\rErrors that will lead the service to abort\r\rcreatedAt(DateTime!):\rCreate date\r\rupdatedAt(DateTime!):\rUpdate date\r\r\nRequire by AccessData: \r\r\rAccessEdge: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/supplierdata/",
	"title": "SupplierData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type SupplierData {\r\rcode: ID! \r\r\risActive: Boolean! \r\r\rdll: ID! \r\r\rhotelCodes(\rhotel: ID!,\r): ID! \r\r\rsupplierGroups: [SupplierGroup!] \r\r}\r\r\rFields code(ID!):\runique identifier of a supplier\r\risActive(Boolean!):\rindicates whether a supplier is active\r\rdll(ID!):\rinstance to which this supllier is connected\r\rhotelCodes(ID!):\raccesses(first: Int, Last: Int, before: String, after:String, criterial: criterialInput): AccessConnection\r\rsupplierGroups([SupplierGroup!]):\rsupplier\u0026#39;s related data of its groups\r\r\nRequire by Supplier: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/suppliergroup/",
	"title": "SupplierGroup",
	"tags": [],
	"description": "",
	"content": " group related to a supplier\nGraphQL Schema definition type SupplierGroup {\r\rgroupCode: String! \r\r\risActive: Boolean! \r\r}\r\r\rFields groupCode(String!):\rgroup code of the group related to this supplier\r\risActive(Boolean!):\rIndicates if the supplier is active for its supplier\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/suppliergroupinput/",
	"title": "SupplierGroupInput",
	"tags": [],
	"description": "",
	"content": " group related to a supplier\nGraphQL Schema definition type SupplierGroupInput {\r\rgroupCode: String! \r\r\risActive: Boolean! \r\r}\r\r\rFields groupCode(String!):\rgroup code of the group related to this supplier\r\risActive(Boolean!):\rIndicates if the supplier is active for its supplier\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/supplierinput/",
	"title": "SupplierInput",
	"tags": [],
	"description": "",
	"content": " Supplier object. Contains its own settings, code and access.\nGraphQL Schema definition type SupplierInput {\r\rsettings: SettingsBaseInput \r\r\rcode: String! \r\r\raccesses: [AccessInput!] \r\r}\r\r\rFields settings(SettingsBaseInput):\rYou can configure an special settings for any supplier. This level overwrites the avail settings level but not the access settings level.\r\rcode(String!):\rCode that represents a supplier in our system. This information is mandatory.\r\raccesses([AccessInput!]):\rArray of accesses that can overwrite an existing access information or include a new access for this avail.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/surcharge/",
	"title": "Surcharge",
	"tags": [],
	"description": "",
	"content": " Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.\nGraphQL Schema definition type Surcharge {\r\rchargeType: ChargeType! \r\r\rmandatory: Boolean! \r\r\rprice: Price! \r\r\rdescription: String \r\r}\r\r\rFields chargeType(ChargeType!):\rIndicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand. Possible charge types: Include or Exclude. when include: this surcharge is mandatory and included in the option\u0026#39;s price when exclude: this surcharge is not included in the option\u0026#39;s price\r\rmandatory(Boolean!):\rIndicates if the surcharge is mandatory or not. If mandatory, this surcharge will be applied to this option if the chargeType is excluded the customer will have to pay it directly at the hotel\r\rprice(Price!):\rIndicates the surcharge price.\r\rdescription(String):\rSpecifies the surcharge description.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/timeout/",
	"title": "Timeout",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Timeout {\r\rsearch: Int! \r\r\rquote: Int! \r\r\rbook: Int! \r\r}\r\r\rFields search(Int!):\rMilliseconds before the search connection is closed.\r\rquote(Int!):\rMilliseconds before the quote connection is closed.\r\rbook(Int!):\rMilliseconds before the book connection is closed.\r\r\nRequire by DefaultSettings: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/timeoutinput/",
	"title": "TimeoutInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type TimeoutInput {\r\rsearch: Int! \r\r\rquote: Int! \r\r\rbook: Int! \r\r}\r\r\rFields search(Int!):\rMilliseconds before the search connection is closed.\r\rquote(Int!):\rMilliseconds before the quote connection is closed.\r\rbook(Int!):\rMilliseconds before the book connection is closed.\r\r\nRequire by DefaultSettingsInput: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/transactions/",
	"title": "Transactions",
	"tags": [],
	"description": "",
	"content": " Supplier transaction\nGraphQL Schema definition type Transactions {\r\rrequest: String! \r\r\rresponse: String! \r\r\rtimeStamp: DateTime! \r\r}\r\r\rFields request(String!):\rTransaction Request.\r\rresponse(String!):\rTransaction Response.\r\rtimeStamp(DateTime!):\rTime when the request has been processed.\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026ldquo;http:\\www.travelgatex.com\u0026rdquo;.\nGraphQL Schema definition scalar URI\r\r\rRequire by MediaData: \r\r\rContact: \rContact type\r\rUrlsInput: \rUrl\u0026#39;s\r\rUrls: \rUrl\u0026#39;s\r\r "
},
{
	"uri": "/travelgatex/reference/enums/unittimetype/",
	"title": "UnitTimeType",
	"tags": [],
	"description": "",
	"content": " Unit Time Type\nGraphQL Schema definition \renum\rUnitTimeType{\r\r\rDAY,\r\r\r\rHOUR,\r\r\r} \r Require by Supplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/updategroupinput/",
	"title": "UpdateGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type UpdateGroupInput {\r\rapi: String! \r\r\rcode: String! \r\r\rinfo: String \r\r\rmethod: Method! \r\r}\r\r\rFields api(String!):\r\r\rcode(String!):\r\r\rinfo(String):\r\r\rmethod(Method!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/updatememberinput/",
	"title": "UpdateMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type UpdateMemberInput {\r\rcode: String! \r\r\rinfo: String \r\r\rgroup: String! \r\r\rroles: [String!]! \r\r\rresource: String! \r\r\rmethod: Method! \r\r}\r\r\rFields code(String!):\r\r\rinfo(String):\r\r\rgroup(String!):\r\r\rroles([String!]!):\r\r\rresource(String!):\r\r\rmethod(Method!):\r\r\r\n"
},
{
	"uri": "/travelgatex/data-automation/uploading-strategies/",
	"title": "Uploading Strategies",
	"tags": [],
	"description": "How to Upload data",
	"content": " How to upload data to the platform There are two ways of uploading data to the platform:\n Secure File Transfer Protocol (SFTP) GraphQL mutation  Secure File Transfer Protocol (SFTP) SFTP, or Secure File Transfer Protocol, is a network protocol that provides a secure access, transfer, and management of data files programmatically. This protocol is used by the largest organizations in finance, technology, and consulting to transfer data such as Personally Identifiable Information (PII) to ensure it remains 100% secure.\nSecurity To ensure the security of your data, we adhere to the highest standards in data security. Some of the advanced security measures we take include:\n Password-based authentication. IP Whitelisting: we whitelist the IP Addresses from where you\u0026rsquo;ll be accessing your SFTP server to ensure you are the only one allowed. Anomaly Detection: to ensure no loss of data, we detect anomalies in your uploads to the SFTP server and immediatly warn you when an upload is about to significantly change your account. Encryption: data is encrypted, keeping your information safe and private.  Setup To get your FTP Credential Details raise a customer care request in Jira Service Desk.\nNaming Conventions Keep in mind that the file is loaded using a specific name depending on the data being uploaded. Remember to always overwrite the last file, because only the last file will be loaded into the platform. If in some case you need to revert to an old version, don\u0026rsquo;t worry because we keep a copy of the old files. For each file name please see the specific file documentation in each product\u0026rsquo;s section.\nGraphQL Mutation Coming soon\r"
},
{
	"uri": "/travelgatex/reference/objects/urls/",
	"title": "Urls",
	"tags": [],
	"description": "",
	"content": " Url\u0026rsquo;s\nGraphQL Schema definition type Urls {\r\rsearch: URI \r\r\rquote: URI \r\r\rbook: URI \r\r\rgeneric: URI \r\r}\r\r\rFields search(URI):\rSpecific Url for Availability method.\r\rquote(URI):\rSpecific Url for Reservation method.\r\rbook(URI):\rSpecific Url for Valuation method.\r\rgeneric(URI):\rSupplier URL used for multiple methods.\r\r\nRequire by AccessData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/urlsinput/",
	"title": "UrlsInput",
	"tags": [],
	"description": "",
	"content": " Url\u0026rsquo;s\nGraphQL Schema definition type UrlsInput {\r\rsearch: URI \r\r\rquote: URI \r\r\rbook: URI \r\r\rgeneric: URI \r\r}\r\r\rFields search(URI):\rSpecific Url for Availability method.\r\rquote(URI):\rSpecific Url for Reservation method.\r\rbook(URI):\rSpecific Url for Valuation method.\r\rgeneric(URI):\rSupplier URL used for multiple methods.\r\r\nRequire by ConfigurationInput: \rThe information and credentials required to access the supplierâ€™s system.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/warning/",
	"title": "Warning",
	"tags": [],
	"description": "",
	"content": " Application warnings\nGraphQL Schema definition type Warning {\r\rcode: String! \r\r\rtype: String! \r\r\rdescription: String! \r\r}\r\r\rFields code(String!):\rWarning code\r\rtype(String!):\rWarning type\r\rdescription(String!):\rWarning description\r\r\n"
},
{
	"uri": "/hotelx/concepts/search-mode/booking-flow/",
	"title": "Booking Flow",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": " Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a Seller.\n --                                            1. SEARCH  2. QUOTE  3. BOOK                            OptionID  WHERE TO NEXT?   QuoteID  OptionID   ConfirmationID  QuoteID      \nSearch Performs an hotel availability search over 1 or more Seller accesses\nDepending Seller, search operations implitiy use supplier\u0026rsquo;s cache.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;search\u0026quot;: { \u0026quot;hotel\u0026quot;: { } } } }  PlayGround Samples  search  Quote Performs an hotel quote over an option returned in Search Response.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;quote\u0026quot;: { \u0026quot;hotel\u0026quot;: { } } } }  PlayGround Samples  quote  Book Performs a book or reservation over an option returned in Quote Response\nOperation { \u0026quot;mutation\u0026quot;: { \u0026quot;hotelBook\u0026quot;: { } } }  PlayGround Samples  hotelBook  "
},
{
	"uri": "/travelgatex/tutorials/stats-dashboard/",
	"title": "Build a Dashboard",
	"tags": [],
	"description": "Build a Dashboard",
	"content": ""
},
{
	"uri": "/learning-graphql/overview/",
	"title": "GraphQL Overview",
	"tags": [],
	"description": "",
	"content": " A query language for your API Designed by Facebook, GraphQL is a new way of dealing and managing APIs, specially useful for decoupling client\u0026rsquo;s from server\u0026rsquo;s logic.\nStraight from the horse\u0026rsquo;s mouth:  A GraphQL query is a string that is sent to a server to be interpreted and fulfilled, which then returns JSON back to the client. Lee Byron, Facebook\n Official Definition  GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools. graphql.org\n More specifically:  GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data. GraphQL isn\u0026rsquo;t tied to any specific database or storage engine and is instead backed by your existing code and data. graphql.org/learn\n GraphQL at TravelgateX GraphQL is a perfect fit for each and every need of our applications:\n Scalable: we must be able to handle millions of requests. Stable: a change in the API must not break the client. Fast: GraphQL not only allows faster response times by letting you choose exactly what you want, but also is consumes less bandwidth which makes responses lighter.  We\u0026rsquo;re a company focused in providing APIs for our clients. SOAP APIs are long gone and modelling REST APIs to fit a vast variety of products is not only hard, but the bigger it gets, the more unmanageable it becomes.\nAt TravelgateX, we\u0026rsquo;re true believers of the Kaisen philosophy. We\u0026rsquo;re constantly researching for new ways of improvement.\n GraphQL allows us to think of our APIs as a whole, giving a coherence in all our products \u0026amp; services, accessible from one single endpoint. It\u0026rsquo;s like a showcase for our APIs. Oscar Perez, CTO\n "
},
{
	"uri": "/hotelx/plugins/mapping/",
	"title": "Mapping",
	"tags": [],
	"description": "Map plugins",
	"content": " Overview Map plugins extends HotelX allowing to match Seller and Buyer codes based on contexts.\nHotelCodeMatching Matches Seller hotel codes based on file code mapping.\nFile Requirements The file should be in the below format:\n Encoding: UTF-8 File Name: [Context Source]_hotel_map.csv Header Row: Code Source, Context Destination, Code Destination Delimiter: Comma  Code Source, Context Destination, Code Destination 10,GUE,c11#10 10000,JCB,7604 10000,TOU,1274249  File must be uploaded to your organization directory SFTP\nConfiguration { }  Parameters stopsOnMatchError: [Boolean] Stops message execution when hotel matching can not be done. Default value False\nBoardCodeMatching RoomSemanticMatching "
},
{
	"uri": "/travelgatex/resources/release-notes/",
	"title": "New Realeases &amp; Updates",
	"tags": [],
	"description": "Release Notes and Changelog",
	"content": "Check out this list of new releases and changes applied on the TravelgateX GraphQL API.\n"
},
{
	"uri": "/travelgatex/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "HotelX Quickstart",
	"content": " This page shows you how to perform basic hotel book using GraphQL Playground.\nBefore you begin  Follow the steps in Creating an API Key to get your API Key. Check connectivity for your API Key. Open Sample Playground and modify HTTP HEADERS field Authorization with your API Key.  Search Hotel  Click on search tab Modify Query Variables with valid dates and send the request.  Quote Hotel  Click on quote tab In Query Variables modify optionRefId with option id value returned in search response and send the request.  Book Hotel  Click on hotelBook tab In Query Variables modify optionRefId with optionRefId value returned in quote response and send the request. Next other information you can chek for book Seller reference  "
},
{
	"uri": "/travelgatex/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": ""
},
{
	"uri": "/hotelx/resources/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "This page documents production updates to connectX Hotel. We recommend that connectX hotel developers periodically check this list for any new announcements.\n"
},
{
	"uri": "/travelgatex/security/",
	"title": "Security",
	"tags": [],
	"description": "Authorization &amp; Authentication",
	"content": "\rOverview\rLearn Platform Security\n\r\r\r\r"
},
{
	"uri": "/travelgatex/",
	"title": "TravelgateX",
	"tags": [],
	"description": "TravelgateX - The Ultimate Platform For The Travel Trade",
	"content": "Run your applications using TravelgateX platform. \t\rOverview\rTravelgateX Platform Information\n\r\r\r\t\rReference\rReference Documentation\n\r\r\r\t\rSecurity\rAuthorization \u0026amp; Authentication\n\r\r\r\t\rData Automation\rAutomate bulk data operations\n\r\r\r\t\rTutorials\rWalkthrouhgs of common applications\n\r\r\r\t\rResources\rNew Updates \u0026amp; Releases\n\r\r\r\r"
},
{
	"uri": "/admin/account/",
	"title": "Account",
	"tags": [],
	"description": "Understand TravelgateX concepts",
	"content": "\rIAM\rAdminX Information\n\r\r\r\r"
},
{
	"uri": "/hotelx/plugins/aggregation/",
	"title": "Aggregation",
	"tags": [],
	"description": "Aggregation plugins",
	"content": " Overview Aggregation plugins extends HotelX allowing filtering Supplier options and respones using different business rules.\nKeyFilter Filters Supplier options based on field keys applying a selector function over field values.\nIt\u0026rsquo;s based on SQL Aggregate Functions but filtering, not aggregating.\n Field Keys as a combination of:\n SupplierCode HotelCode BoardCode RoomCode Refundable  Functions:\n Min Max  Field Values:\n PriceNet PriceGross   Configuration { }  Parameters keys: [String!] Values must be a valid Field Key.\nfunction: String! Value must be a valid Function.\nvalue: String! Value must be a valid Field Value.\n"
},
{
	"uri": "/learning-graphql/basic_concepts/",
	"title": "Basic Concepts",
	"tags": [],
	"description": "",
	"content": " Queries and Mutations  At its simplest, GraphQL is about asking for specific fields on objects. Let\u0026rsquo;s start by looking at a very simple query and the result we get when we run it http://graphql.org/learn/queries/?utm_source=docs.travelgatex.com\n There are 2 basic operations in GraphQL schemas:\nQueries http://graphql.org/learn/queries/?utm_source=docs.travelgatex.com\nJust like a RESTful Get method, queries query the system. This operation reads values from the server using a Graph Object and gets a JSON as a response.\nUnlike a RESTful service, queries are interactive, it allows the user to choose exactly what he wants to get returned. This way, if the API owner makes a change to the API, the client will not be affected as long as the query does not change. Think of it like a good\u0026rsquo;ol SQL query. As long as you send the same one, the results is always predictable.\nThis fact makes versioning totally unnecessary in GraphQL APIs. There\u0026rsquo;s no need to specify which version you want to consume, since it\u0026rsquo;s you who are in charge of deciding which fields you want to retrieve.\nAs a bonus, the GraphQL specification includes handling of deprecated fields and marks a field as is-deprecated by adding a deprecationReason to the field.\nQuery example\nEJEMPLO PEQUE DE DISPO TODO: Falta ejemplo!!\rMutations http://graphql.org/learn/queries/#mutations?utm_source=docs.travelgatex.com\nMutations are methods that change the server. It makes a physical change to the data. Could be inserting a new object in a database, deleting or updating. Queries take care of POST, PUT and DELETE methods in a REST API or INSERT, UPDATE and DELETE in SQL.\nMutation example:\n"
},
{
	"uri": "/hotelx/concepts/search-mode/",
	"title": "Booking Flow",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": ""
},
{
	"uri": "/getting-started/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Understanding the concepts",
	"content": " TravelgateX offers a set of Products ready to be integrated using a single GraphQL endpoint. If you\u0026rsquo;re not sure about a specific concept, feel free to check our guide bellow to understand the basic concepts.\nGraphQL API \u0026ldquo;TravelgateX is the first company in the industry travel with an API completely based in GraphQL. Most travel APIs are old legacy XML Soap APIs and we faced a lot of problems with that kind technology. The benefit of using GraphQL, is that each client is ultimately responsible over what it wants to be returned.\nIt is a stable, secure and fault tolerant load balanced between many datacenters from four different cloud providers: Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime. If you\u0026rsquo;re looking for more detailed analysis on GraphQL please have a look at our guide on how to use TravelgateX GraphQL API.\u0026rdquo;\nPartner A Partner can be either a User identifying a person or a Service Account identified by an API Key. Both of them interact with any TravelgateX APIs or apps.\nOrganization An Organization is made up of Partners (they can belong to one or more organizations), Resources, Settings, Permissions and other Metadata.\nProduct A Product is an API domain which is available for the consumption of Resources. We organize our APIs by similarity and common features. If you wish to read more about its features visit the Product guide.\nEntities Entities or core resources are entities that define common objects in all our API domains.\nBuyer A Buyer is a Partner who is connected to TravelgateX in the demand side in order to buy travel products from Sellers.\nProvider A Provider is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected BuyersMa.\nTech Platform Many Partners, Buyers or Providers use a third party platform in order to buy or sell travel products. These are usually tech companies specialized in developing custom software for other companies.\nContext A Context refers to the Provider codes the request is using. It\u0026rsquo;s a way of specifiying which Provider codes is being used so it can be transformed and standardized.\nAccess An Access is a set of credentials and configuration in order to access a Provider.\n"
},
{
	"uri": "/hotelx/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Understand TravelgateX basic concepts",
	"content": "\rAccess, Supplier and Context\rLearn about Core Entities used in TravelgateX\n\r\r\rBooking Flow\rLearn about Transactional Booking flow. Search, Quote and Confirm Reservation\n\r\r\rBooking Flow:\rLearn about Transactional Booking flow. Search, Quote and Confirm Reservation\r\r\rSearch Single Mode:\rLearn about Transactional Booking flow. Search, Quote and Confirm Reservation\r\r\rSearch Multi Mode:\rLearn about Transactional Booking flow. Search, Quote and Confirm Reservation\r\r\r\r\r\rManagement Flow\rLearn about Management Flow. Cancellations and Booking List\n\r\r\rHotel Content\rLearn about how manage content data to manage in your site. Hotel, Boards, Categories...\n\r\r\r\r"
},
{
	"uri": "/admin/connect/",
	"title": "Connect",
	"tags": [],
	"description": "Understand TravelgateX concepts",
	"content": "\rEntities\rAdminX Information\n\r\r\r\r"
},
{
	"uri": "/hotelx/plugins/markup/",
	"title": "Markup",
	"tags": [],
	"description": "Markup plugins",
	"content": " Overview "
},
{
	"uri": "/getting-started/playground/",
	"title": "Playground",
	"tags": [],
	"description": "Try our API",
	"content": " Try it For Yourself API Playground is available for free! It lets you play, learn easily and it’s simple to set up. Allows learners of all levels to start exploring and creating quickly. Our Query Builder tool helps users get the most out of the TravelgateX API by creating custom queries and have access TravelgateX API data. You can even customize your responses to better serve your purpose.\n"
},
{
	"uri": "/travelgatex/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/concepts/search-mode/search-single-mode/",
	"title": "Search Single Mode",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": " Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a Seller. Performs an hotel availability search over 1 or more Seller accesses\nSearch Single Mode                                                                  \n"
},
{
	"uri": "/hotelx/plugins/converter/",
	"title": "Converter",
	"tags": [],
	"description": "Converter plugins",
	"content": " Overview "
},
{
	"uri": "/travelgatex/data-automation/",
	"title": "Data Automation",
	"tags": [],
	"description": "Automate bulk data operations",
	"content": " Bulk Data Automation Many of TravelgateX\u0026rsquo;s products use client\u0026rsquo;s data in order to perform tasks. You can upload these data to our platform either by uploading it via SFTP or via a mutation. It\u0026rsquo;s up to you to decide how to get the data to our servers.\nOur APIs have been built from the ground up with performance in mind, this means that we must store data inside the application in order to keep the response time to a minimum.\nThe data we must store per product is the following:\nHotelX  Mappings Pricing Rules Custom hotel lists (up to 4 different lists)  Uploading Strategies\rHow to Upload data\n\r\r\r\r"
},
{
	"uri": "/hotelx/",
	"title": "HotelX",
	"tags": [],
	"description": "HotelX: NextGen Hotel Search API",
	"content": "ConnectX Hotel connects you to multiple sellers addding business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\nThere are no integration investments and you can operate with hundreds of hotel sellers. ConnectX Hotel has been designed from the ground up to be fast, reliable and scales to millions of requests.\n\t\rOverview\rHotelX Information\n\r\r\r\t\rQuickstart\rHotelX Quickstart\n\r\r\r\t\rConcepts\rUnderstand TravelgateX basic concepts\n\r\r\r\t\rHow-to Guides\rPerform specific tasks\n\r\r\r\t\rPlugins\rAdditional logic to your App\n\r\r\r\t\rReference\rReference Documentation\n\r\r\r\t\rResources\rQuotas, release notes\n\r\r\r\r"
},
{
	"uri": "/hotelx/howtos/",
	"title": "How-to Guides",
	"tags": [],
	"description": "Perform specific tasks",
	"content": "How-to Guides\n"
},
{
	"uri": "/travelgatex/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/concepts/management-flow/",
	"title": "Management Flow",
	"tags": [],
	"description": "Learn about Management Flow. Cancellations and Booking List",
	"content": " Manage operations can be used in order to operate above Seller\u0026rsquo;s bookings.\nCancel Performs a Seller booking cancellation.\nOperation { \u0026quot;mutation\u0026quot;: { \u0026quot;hotelCancel\u0026quot;: { } } } }  PlayGround Samples  hotelCancel  Booking Performs a Seller booking list or detail.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;booking\u0026quot;: { \u0026quot;hotel\u0026quot;: { } } } }  PlayGround Samples  booking  "
},
{
	"uri": "/travelgatex/security/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Learn Platform Security",
	"content": " Introduction Resources are granted to Partners belonging to Organizations.\nIAM lets partners administrators authorize who can take action on specific resources, giving you full control and visilibity to manage resources centrally.\nAuthentication Authentication is the process of authorizing or making sure that the Partner is the correct one. Every request to TravelgateX GraphQL API must carry an Access Token whether it\u0026rsquo;s an API Key or a JSON Web Token.\nAPI Key The API key takes cares of the authentication of applications, normally created as Service Account with limited scopes. The correct way to send it to GraphQL server is via HTTP Header:\n API key: \u0026quot;Authorization: Apikey xxxxxxxxx\u0026quot;  curl -X\\ POST\\ -H \u0026quot;Content-Type: application/json\u0026quot; \\ -H \u0026quot;Authorization: Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot; \\ --data '{\u0026quot;query\u0026quot;:\u0026quot;{searchStatusService{code description}}\u0026quot;}' \\ --compressed \\ https://api.travelgatex.com  Creating an API Key For development purposes please use the following test Api Key q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\nJSON Web Token Coming soon\rAuthorization Once the Partner is authenticated we must authorize the partner to use the requested Resource.\nRole based access control (RBAC) is the de facto standard for authorization. However, it introduces many complexities for practical applications: roles can be inflexible to change and additional mapping between users and roles must be maintained separately.\nTravelgateX permissions are Resource Group Assigned rules, defined using GraphQL API and determined at runtime by the data graph of the application.\nFurther Reading  https://hackernoon.com/how-do-you-authenticate-mate-f2b70904cc3a  "
},
{
	"uri": "/hotelx/plugins/processor/",
	"title": "Processor",
	"tags": [],
	"description": "Processor plugins",
	"content": " Overview Processor plugins extends HotelX allowing multiple operation types.\nProcessor plugins can modify request and response message, allowing a full range of operations:\n Split arrays Join arrays Modify object values Add or remove object instances  "
},
{
	"uri": "/hotelx/concepts/search-mode/search-multi-mode/",
	"title": "Search Multi Mode",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": " Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a Seller. Performs an hotel availability search over 1 or more Seller accesses\nSearch Multi Mode                                                                         \n"
},
{
	"uri": "/learning-graphql/thinking_in_graphql/",
	"title": "Thinking in GraphQL",
	"tags": [],
	"description": "",
	"content": " A Paradigm Shift GraphQL is a query language, and as such it does exactly that: it queries servers in order to get results back. And we get to choose exactly what data we want to retrieve. As opposed to JSON, each piece of data has its own type, so we get to know exactly what to expect, it\u0026rsquo;s a typed language. This gives it a lot of predictability, something we can really appreciate, especially when dealing with third party APIs, where we have no control of what\u0026rsquo;s going on in the other side.\nBuilding GraphQL Schemas In GraphQL, the API specifications are called schemas. A GraphQL Schema is like a contract between the client and the server. It\u0026rsquo;s the definition of how they talk to each other, what they expect from each other so each of them can know exactly what they can and cannot send to each other and what they\u0026rsquo;ll get in response to that. This makes a lot of a difference when creating our schemas, we have to get used to think in a Schema First way.\n A particularly interesting pattern seems to be emerging. Over and over again, I hear developers describing a way of approaching product development we’re calling “GraphQL First.”https://dev-blog.apollodata.com/graphql-first-a-better-way-to-build-modern-apps-b5a04f7121a0\n First, we model our data, thinking of all the different uses we can give to it. And only then, we\u0026rsquo;ll think of where we going to get it from. It could even be from different services, like a database and another node from a third party provider.\nAnother great feature is that the GraphQL specification ensures we write documentation while writing the schema. Apart from being really cool to see your text in the GraphiQL window while you\u0026rsquo;re typing your query, it really helps you to think of each and every node and why you\u0026rsquo;re putting it there. We use APIs Guru\u0026rsquo;s graphql-faker. In one screen you write the schema, and in the other you try what you\u0026rsquo;ve just written, including the help text or documentation you\u0026rsquo;ve just created.\nFurthermore GraphQL schemas support inheritance, we can use the same objects for different queries. For example, in our business domain, and in most businesses for that matter, we have to return the price of the Hotel, or Flight. We can use exactly the same element in both, and just extend it if needed. This makes the job much easier and faster for the developer who\u0026rsquo;s implementing our service.\nTravelgateX schema implementation follow practices explained here\nBuilding Queries  Componentes de la query Componentes de la respuesta Respuesta Como lo hacemos Paginacion  Building Mutations  Componentes de la query Componentes de la respuesta Respuesta Como lo hacemos Paginacion  TODO: Falta chicha!!\r"
},
{
	"uri": "/flightx/",
	"title": "FlightX",
	"tags": [],
	"description": "",
	"content": "FlightX connects you to multiple sellers addding business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\nThere are no integration investments and you can operate with hundreds of hotel sellers. FlightX has been desined to be fast, reliable and offer strong performance.\n\t\rOverview\rFlightX Information\n\r\r\r\r"
},
{
	"uri": "/hotelx/concepts/content/",
	"title": "Hotel Content",
	"tags": [],
	"description": "Learn about how manage content data to manage in your site. Hotel, Boards, Categories...",
	"content": " Hotel Content operations allows changes to be made to static methods on HotelX.\nCurrently, a system where hotels can be divided into different rankings or priorities in order to facilitate the mapping process.\nHotels Ranking The main goal of this process is to create a hotel ranking in order to divide the whole portfolio so the hotel list is more manageable and each ranking or sublist responds to a specific business criteria, such as but not limited to directly contracted hotels, best deals, top sales hotels, etc.\nOnce the hotel ranking file(s) have been uploaded, the static hotel list method can filter hotels according to this ranking.\nIn order to set up hotel ranking lists you need to upload a file in csv format with a specific name to your organisation\u0026rsquo;s FTP.\nFile Names (mandatory) Each file has a different function depending of the name has a sense or another from the business point of view:\nTo process files correctly they must be named according to the following nameing convention:\n   File Nane Description     rank1.csv Rank 1, for example direct contracts   rank2.csv Rank 2, for example best deals   rank3.csv Rank 3, for example top sales   rank4.csv Rank 4, for example competitive hotels    Header fields (mandatory) In order to be correctly processed the header fields must have the following format:\n   Field Name Data Type     provider_id string   hotel_code string   rank boolean [1,0]    Example file format (rank1.csv):\n   provider_id hotel_code rank     travelgatex 2018 1   travelgatey 2017 1    Process file In order to process the file it must be uploaded to your organization\u0026rsquo;s FTP folder in the TravelgateX Platform.\nTemplate File You can download a temaplate CSV file here\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/plugins/",
	"title": "Plugins",
	"tags": [],
	"description": "Additional logic to your App",
	"content": "Customize your additional features.\n\t\rOverview\rPlugins workflow execution\n\r\r\r\t\rMapping\rMap plugins\n\r\r\r\t\rAggregation\rAggregation plugins\n\r\r\r\t\rMarkup\rMarkup plugins\n\r\r\r\t\rConverter\rConverter plugins\n\r\r\r\t\rProcessor\rProcessor plugins\n\r\r\r\t\rDevelopment\rDevelop your own plugins\n\r\r\r\r"
},
{
	"uri": "/statsx/",
	"title": "StatsX",
	"tags": [],
	"description": "",
	"content": "\r\t\rOverview\rStatsX Information\n\r\r\r\r"
},
{
	"uri": "/learning-graphql/tooling/",
	"title": "Tooling",
	"tags": [],
	"description": "",
	"content": " Tooling Please find below a collection of tools we\u0026rsquo;ve been using to help us develop in GraphQL. We have curated this list with the different goals each of the tools is for:\nDesigning Schemas We follow the Schema First methodology. There are many tools, the ones we tried and like most nowadays are:\n APIs Guru\u0026rsquo;s graphql-faker: https://github.com/APIs-guru/graphql-faker  TODO: Falta chicha!!\rGo Packages Nowadays most our APIS are written in Go, mainly because of speed, ability to handle very high load while using low resources. Also because of the ability to develop plugins. We\u0026rsquo;ve used many libraries and packages to help us, hereby our list:\n Redis: https://godoc.org/github.com/garyburd/redigo/redis  TODO: Falta chicha!!\rNodeJS Packages Other pieces of our software are written in NodeJS. Mainly because some packages are wither not avaialble in Go, or because the Go package is not as performant as the Node alternative. These are the packages we use:\nTODO: Falta chicha!!\rSchema Visualizers It\u0026rsquo;s nice to be able to see your schema and be able to navigate through it.\n GraphQL Voyager - Represent any GraphQL API as an interactive graph  Documentation Generators Generate beaultiful static documentation sites directly from schema or introspection query\n Graph Docs Graphdoc  GraphQL Clients Build, create and play with queries, it\u0026rsquo;s fun!\n Insomnia: our favorite \u0026#9825; graphql-playground: favorite online client GraphiQL: the original  TODO: Falta chicha!!\rBig List Very curated list full of different tools, resources, etc\n Awesome GraphQL  "
},
{
	"uri": "/travelgatex/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "Walkthrouhgs of common applications",
	"content": "What you can build on TravelgateX\u0026rsquo;s platform Build An OTA\rBuild Your Own Full Fledged OTA\n\r\r\rBuild a Dashboard\rBuild a Dashboard\n\r\r\r\r"
},
{
	"uri": "/hotelx/plugins/development/",
	"title": "Development",
	"tags": [],
	"description": "Develop your own plugins",
	"content": "In this article, you learn how develop your own HotelX plugins.\n"
},
{
	"uri": "/travelgatex/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/mappeax/",
	"title": "MappeaX",
	"tags": [],
	"description": "",
	"content": "\r\t\rOverview\rFlightX Information\n\r\r\r\r"
},
{
	"uri": "/hotelx/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": " Reference "
},
{
	"uri": "/travelgatex/resources/",
	"title": "Resources",
	"tags": [],
	"description": "New Updates &amp; Releases",
	"content": "\rNew Realeases \u0026amp; Updates\rRelease Notes and Changelog\n\r\r\r\r"
},
{
	"uri": "/learning-graphql/tutorials_resources/",
	"title": "Tutorials &amp; Resources",
	"tags": [],
	"description": "",
	"content": " The GraphQL ecosystem is growing fast. Apart from facebook\u0026rsquo;s and Graphql.org\u0026rsquo;s official documentation, each day as more and more development teams embrace the technology new blog posts, articles, tutorials, videos and learning material in general is published online.\nThis list is intended to serve as a examples we\u0026rsquo;ve used and found useful when adopting the technology. We\u0026rsquo;ve separated between tutorials get-your-hands-dirty full action kind to resources, which are reading materials, podcasts or any other kind of documentation, written or not, which will help you to Think in GraphQL.\nWe hope you enjoy!\nTutorials  https://github.com/blog/2412-learn-graphql-with-github  TODO: Falta chicha!!\rResources  GraphQL official documentation Apollo Relay official documentation Schema first development - Johannes Schickling Schema-first development with GraphQL GraphQL First in practice at Quri GraphQL First: A better way to build modern apps GraphQL User List  "
},
{
	"uri": "/insightsx/",
	"title": "InsightsX",
	"tags": [],
	"description": "",
	"content": "\r\t\rOverview\rFlightX Information\n\r\r\r\r"
},
{
	"uri": "/hotelx/resources/",
	"title": "Resources",
	"tags": [],
	"description": "Quotas, release notes",
	"content": " Resources "
},
{
	"uri": "/admin/",
	"title": "Admin",
	"tags": [],
	"description": "",
	"content": "\r\t\rOverview\rAdmin Information\n\r\r\r\t\rAccount\rUnderstand TravelgateX concepts\n\r\r\r\t\rConnect\rUnderstand TravelgateX concepts\n\r\r\r\r"
},
{
	"uri": "/learning-graphql/",
	"title": "Learning GraphQL",
	"tags": [],
	"description": "",
	"content": "\r\rGraphQL Overview\r\r\r\r\rBasic Concepts\r\r\r\r\rThinking in GraphQL\r\r\r\r\rTooling\r\r\r\r\rTutorials \u0026amp; Resources\r\r\r\r\r"
},
{
	"uri": "/_footer/",
	"title": "footer",
	"tags": [],
	"description": "",
	"content": "Lorem ipsum dolor sit amet.\n"
},
{
	"uri": "/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/guion/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Getting Started pagetitle = \u0026ldquo;\u0026rdquo; GOAL: información basica para empezar a desarrollar\nOverview GOAL: Explicar el who, why, how de la plataforma\n WHO: Equipos tecnicos para consumir servicios de travel\n WHY: search \u0026amp; book travel multi-products \u0026amp; multi-source\n WHY: Using the Storefront API, you can:\n HOW: Plataforma: Multi-Producto \u0026amp; Multi-Source\n HOW: Diagrama Platforma\n HOW: Utilización de GraphQL: EndPoint único\n WHY: Fast. Scalable. Reliable.\n Resumen: Ventajas GraphQL\n Get Engaged: comunidad, docuemntación y jira\n CALL2ACTION: Quickstart busqueda hoteles\n  QuickStart GOAL: minimo indispensable para hacer una petición\n INTRO: empezar en 1min   API Key test Ejemplo de búsqueda de ConnectX inline   Product QuickStarts\n CALL2ACTION: Try ConnectX Playground\n  Concepts GOAL: Glosario de conceptos\nINTRO: Explicar pq necesitamos estos conceptos y donde se utilizan\n Partner API Organization Buyer Seller Access Product Permission Plugin  CALL2ACTION: Read More about the Platform\nPlatform GOAL: Como funciona la plataforma a nivel técnico\nOverview GOAL: explicar utilizacion de la plataforma con GraphQL\nINTRO: Explica lo que se necesita saber para utilizar un producto, se utiliza como referencia de la documentación de los demás productos\n WHO: Developers de empresas de travel que quieran integrarse para comprar/vender productos de travel\n WHY: unificar en 1 API sencilla todos los servicios que se puedan vender o comprar en una empresa de productos turisticos\n WHY: Que puede hacer con la plataforma: \u0026ndash; Fetch data about a single product or a collection of products to display on any website or device. \u0026ndash; Create unique checkout experiences with full control over the shopping cart. \u0026ndash; Connect to more than 600 sellers of travel products. \u0026ndash; Allow customers to search \u0026amp; book through a number of sellers \u0026ndash; Gain complete control of the number and quality of requests sent and received \u0026ndash; Map new sellers to your existing hotel codes\n HOW: implementación API en GraphQL\n HOW: como funciona? \u0026ndash; HOW: breve explicación GraphQL \u0026ndash; HOW: endpoint unico \u0026ndash; HOW: GraphQL requests \u0026ndash; HOW: Security \u0026ndash; HOW: Data Automation \u0026ndash; HOW: API Reference \u0026ndash; HOW: Resources \u0026mdash; HOW: Quotas \u0026amp; Limits \u0026mdash; HOW: Release Notes\n  CALL2ACTION: Get Started With our Products\nSecurity GOAL: Explicar en detalle como fuciona INTRO: CONTENIDO:\nData Automation GOAL: INTRO: CONTENIDO:\nAPI Reference GOAL: INTRO: CONTENIDO:\nQuotas \u0026amp; Limits GOAL: INTRO: CONTENIDO:\nRelease Notes GOAL: INTRO: CONTENIDO:\nTutorials TravelB2B Stats Dashboard HotelX GOAL: información basica para empezar a desarrollar\nOverview GOAL: Explicar el who, why, how de la hotelX\n WHO: Equipos tecnicos para consumir apis de diferentes proveedores de acomodación\n WHY: search \u0026amp; book travel hotels multi-source\n WHY: Using the Storefront API, you can:\n HOW: Plataforma: Multi-Producto \u0026amp; Multi-Source\n HOW: Diagrama Platforma\n HOW: Utilización de GraphQL: EndPoint único\n WHY: Fast. Scalable. Reliable.\n Resumen: Ventajas GraphQL\n Get Engaged: comunidad, docuemntación y jira\n CALL2ACTION: Quickstart busqueda hoteles\n  QuickStart GOAL: minimo indispensable para hacer una petición\n INTRO: empezar en 1min   API Key test Ejemplo de búsqueda de ConnectX inline   Product QuickStarts\n CALL2ACTION: Try ConnectX Playground\n  Concepts GOAL: Glosario de conceptos\nINTRO: Explicar pq necesitamos estos conceptos y donde se utilizan\n Partner API Organization Buyer Seller Access Product Permission Plugin  CALL2ACTION: Read More about the Platform\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "contributors and packages used by hugo-theme-docdock",
	"content": " github contributors .ghContributors{\rdisplay:flex;\rflex-flow: wrap;\ralign-content: flex-start\r}\r.ghContributors  div{\rwidth: 50% ;\rdisplay: inline-flex;\rmargin-bottom: 5px;\r}\r.ghContributors  div label{\rpadding-left: 4px ;\r}\r.ghContributors  div span{\rfont-size: x-small;\rpadding-left: 4px ;\r}\r\r\r@vjeantet\r245 commits\r\r\r@matcornic\r49 commits\r\r\r@W-Floyd\r24 commits\r\r\r@gwleclerc\r21 commits\r\r\r@lierdakil\r16 commits\r\r\r@Pilskalns\r12 commits\r\r\r@jose-oc\r8 commits\r\r\r@SiamKreative\r6 commits\r\r\r@Xipas\r5 commits\r\r\r@altinnadmin\r4 commits\r\r\r@FMuro\r2 commits\r\r\r@Thiht\r2 commits\r\r\r@EnigmaCurry\r2 commits\r\r\r@aral\r2 commits\r\r\r@adamlamar\r1 commits\r\r\r@byzheng\r1 commits\r\r\r@zivbk1\r1 commits\r\r\r@damoon\r1 commits\r\r\r@vielmetti\r1 commits\r\r\r@erikjasiak\r1 commits\r\r\r@giuliov\r1 commits\r\r\r@farmergreg\r1 commits\r\r\r@tarpdalton\r1 commits\r\r\r@JohnBlood\r1 commits\r\r\r@kamilchm\r1 commits\r\r\r@ripienaar\r1 commits\r\r\r@shazic\r1 commits\r\r\r@viertaxa\r1 commits\r\r\r@uweschaefer\r1 commits\r\r\r@eyoder\r1 commits\r\r\r@justin-yan\r1 commits\r\r\r@karlmacklin\r1 commits\r\r\r@petzi53\r1 commits\r\r\r@remi31000\r1 commits\r\r\r@xxxtonixxx\r1 commits\r\r Other contributors  @bep supports and advices   Packages and libraries  Bootstrap - front-end framework mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; JavaScript-autoComplete - An extremely lightweight and powerful vanilla JavaScript completion suggester. clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support reveal-js - The HTML Presentation Framework  Tooling  Netlify - Continuous deployement and hosting of this documentation Hugo \r  "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "TravelgateX Documentation",
	"tags": [],
	"description": "",
	"content": ""
}]